
Clocks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036d4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08003874  08003874  00004874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038f8  080038f8  00005068  2**0
                  CONTENTS
  4 .ARM          00000008  080038f8  080038f8  000048f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003900  08003900  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003900  08003900  00004900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003904  08003904  00004904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003908  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d8  20000068  08003970  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000240  08003970  00005240  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009456  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001987  00000000  00000000  0000e4ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000840  00000000  00000000  0000fe78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000642  00000000  00000000  000106b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f9b  00000000  00000000  00010cfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a666  00000000  00000000  00027c95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d437  00000000  00000000  000322fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bf732  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002814  00000000  00000000  000bf778  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  000c1f8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800385c 	.word	0x0800385c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	0800385c 	.word	0x0800385c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
    if (ch == '\n') {
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	2b0a      	cmp	r3, #10
 800057c:	d109      	bne.n	8000592 <__io_putchar+0x22>
        uint8_t ch2 = '\r';
 800057e:	230d      	movs	r3, #13
 8000580:	73fb      	strb	r3, [r7, #15]
        HAL_UART_Transmit(&huart2, &ch2, 1, HAL_MAX_DELAY);
 8000582:	f107 010f 	add.w	r1, r7, #15
 8000586:	f04f 33ff 	mov.w	r3, #4294967295
 800058a:	2201      	movs	r2, #1
 800058c:	4807      	ldr	r0, [pc, #28]	@ (80005ac <__io_putchar+0x3c>)
 800058e:	f001 fe79 	bl	8002284 <HAL_UART_Transmit>
    }

    HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000592:	1d39      	adds	r1, r7, #4
 8000594:	f04f 33ff 	mov.w	r3, #4294967295
 8000598:	2201      	movs	r2, #1
 800059a:	4804      	ldr	r0, [pc, #16]	@ (80005ac <__io_putchar+0x3c>)
 800059c:	f001 fe72 	bl	8002284 <HAL_UART_Transmit>
    return 1;
 80005a0:	2301      	movs	r3, #1
}
 80005a2:	4618      	mov	r0, r3
 80005a4:	3710      	adds	r7, #16
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	200000a4 	.word	0x200000a4

080005b0 <is_button_pressed>:

bool is_button_pressed(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  if (HAL_GPIO_ReadPin(USER_BTN_GPIO_Port, USER_BTN_Pin) == GPIO_PIN_RESET) {
 80005b4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005b8:	4805      	ldr	r0, [pc, #20]	@ (80005d0 <is_button_pressed+0x20>)
 80005ba:	f000 fe11 	bl	80011e0 <HAL_GPIO_ReadPin>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d101      	bne.n	80005c8 <is_button_pressed+0x18>
    return true;
 80005c4:	2301      	movs	r3, #1
 80005c6:	e000      	b.n	80005ca <is_button_pressed+0x1a>
  } else {
    return false;
 80005c8:	2300      	movs	r3, #0
  }
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40020800 	.word	0x40020800

080005d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d4:	b5b0      	push	{r4, r5, r7, lr}
 80005d6:	b090      	sub	sp, #64	@ 0x40
 80005d8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005da:	f000 fb01 	bl	8000be0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005de:	f000 f84d 	bl	800067c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e2:	f000 f8fb 	bl	80007dc <MX_GPIO_Init>
  MX_RTC_Init();
 80005e6:	f000 f8a9 	bl	800073c <MX_RTC_Init>
  MX_USART2_UART_Init();
 80005ea:	f000 f8cd 	bl	8000788 <MX_USART2_UART_Init>
  while (1)
  {
	  RTC_TimeTypeDef time;
	  RTC_DateTypeDef date;

	  if (is_button_pressed()) {
 80005ee:	f7ff ffdf 	bl	80005b0 <is_button_pressed>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d018      	beq.n	800062a <main+0x56>
		// WAŻNE : nieużywane pola muszą być wyzerowane
		  RTC_TimeTypeDef new_time = {0};
 80005f8:	1d3b      	adds	r3, r7, #4
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
 80005fe:	605a      	str	r2, [r3, #4]
 8000600:	609a      	str	r2, [r3, #8]
 8000602:	60da      	str	r2, [r3, #12]
 8000604:	611a      	str	r2, [r3, #16]

		  //Czekamy na zwolnienie przycisku
		  while(is_button_pressed()){}
 8000606:	bf00      	nop
 8000608:	f7ff ffd2 	bl	80005b0 <is_button_pressed>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d1fa      	bne.n	8000608 <main+0x34>

		  new_time.Hours = 7;
 8000612:	2307      	movs	r3, #7
 8000614:	713b      	strb	r3, [r7, #4]
		  new_time.Minutes = 45;
 8000616:	232d      	movs	r3, #45	@ 0x2d
 8000618:	717b      	strb	r3, [r7, #5]
		  new_time.Seconds = 0;
 800061a:	2300      	movs	r3, #0
 800061c:	71bb      	strb	r3, [r7, #6]
		  HAL_RTC_SetTime(&hrtc, &new_time, RTC_FORMAT_BIN);
 800061e:	1d3b      	adds	r3, r7, #4
 8000620:	2200      	movs	r2, #0
 8000622:	4619      	mov	r1, r3
 8000624:	4813      	ldr	r0, [pc, #76]	@ (8000674 <main+0xa0>)
 8000626:	f001 fbd8 	bl	8001dda <HAL_RTC_SetTime>
	  }

	  HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 800062a:	f107 031c 	add.w	r3, r7, #28
 800062e:	2200      	movs	r2, #0
 8000630:	4619      	mov	r1, r3
 8000632:	4810      	ldr	r0, [pc, #64]	@ (8000674 <main+0xa0>)
 8000634:	f001 fc6b 	bl	8001f0e <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8000638:	f107 0318 	add.w	r3, r7, #24
 800063c:	2200      	movs	r2, #0
 800063e:	4619      	mov	r1, r3
 8000640:	480c      	ldr	r0, [pc, #48]	@ (8000674 <main+0xa0>)
 8000642:	f001 fcc2 	bl	8001fca <HAL_RTC_GetDate>

	  printf("Aktualna data i czas: %04d-%02d-%02d | %02d:%02d:%02d\n", 2000 + date.Year, date.Month, date.Date, time.Hours, time.Minutes, time.Seconds);
 8000646:	7efb      	ldrb	r3, [r7, #27]
 8000648:	f503 61fa 	add.w	r1, r3, #2000	@ 0x7d0
 800064c:	7e7b      	ldrb	r3, [r7, #25]
 800064e:	461c      	mov	r4, r3
 8000650:	7ebb      	ldrb	r3, [r7, #26]
 8000652:	461d      	mov	r5, r3
 8000654:	7f3b      	ldrb	r3, [r7, #28]
 8000656:	7f7a      	ldrb	r2, [r7, #29]
 8000658:	7fb8      	ldrb	r0, [r7, #30]
 800065a:	9002      	str	r0, [sp, #8]
 800065c:	9201      	str	r2, [sp, #4]
 800065e:	9300      	str	r3, [sp, #0]
 8000660:	462b      	mov	r3, r5
 8000662:	4622      	mov	r2, r4
 8000664:	4804      	ldr	r0, [pc, #16]	@ (8000678 <main+0xa4>)
 8000666:	f002 fa8b 	bl	8002b80 <iprintf>
	  HAL_Delay(200);
 800066a:	20c8      	movs	r0, #200	@ 0xc8
 800066c:	f000 fb2a 	bl	8000cc4 <HAL_Delay>
  {
 8000670:	e7bd      	b.n	80005ee <main+0x1a>
 8000672:	bf00      	nop
 8000674:	20000084 	.word	0x20000084
 8000678:	08003874 	.word	0x08003874

0800067c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b094      	sub	sp, #80	@ 0x50
 8000680:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000682:	f107 0320 	add.w	r3, r7, #32
 8000686:	2230      	movs	r2, #48	@ 0x30
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f002 facd 	bl	8002c2a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000690:	f107 030c 	add.w	r3, r7, #12
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
 800069e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a0:	2300      	movs	r3, #0
 80006a2:	60bb      	str	r3, [r7, #8]
 80006a4:	4b23      	ldr	r3, [pc, #140]	@ (8000734 <SystemClock_Config+0xb8>)
 80006a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006a8:	4a22      	ldr	r2, [pc, #136]	@ (8000734 <SystemClock_Config+0xb8>)
 80006aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80006b0:	4b20      	ldr	r3, [pc, #128]	@ (8000734 <SystemClock_Config+0xb8>)
 80006b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006b8:	60bb      	str	r3, [r7, #8]
 80006ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006bc:	2300      	movs	r3, #0
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	4b1d      	ldr	r3, [pc, #116]	@ (8000738 <SystemClock_Config+0xbc>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a1c      	ldr	r2, [pc, #112]	@ (8000738 <SystemClock_Config+0xbc>)
 80006c6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006ca:	6013      	str	r3, [r2, #0]
 80006cc:	4b1a      	ldr	r3, [pc, #104]	@ (8000738 <SystemClock_Config+0xbc>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80006d8:	2306      	movs	r3, #6
 80006da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006dc:	2301      	movs	r3, #1
 80006de:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e0:	2301      	movs	r3, #1
 80006e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006e4:	2310      	movs	r3, #16
 80006e6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006e8:	2300      	movs	r3, #0
 80006ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ec:	f107 0320 	add.w	r3, r7, #32
 80006f0:	4618      	mov	r0, r3
 80006f2:	f000 fda7 	bl	8001244 <HAL_RCC_OscConfig>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80006fc:	f000 f8c0 	bl	8000880 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000700:	230f      	movs	r3, #15
 8000702:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000704:	2300      	movs	r3, #0
 8000706:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000708:	2300      	movs	r3, #0
 800070a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800070c:	2300      	movs	r3, #0
 800070e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000710:	2300      	movs	r3, #0
 8000712:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000714:	f107 030c 	add.w	r3, r7, #12
 8000718:	2100      	movs	r1, #0
 800071a:	4618      	mov	r0, r3
 800071c:	f001 f80a 	bl	8001734 <HAL_RCC_ClockConfig>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000726:	f000 f8ab 	bl	8000880 <Error_Handler>
  }
}
 800072a:	bf00      	nop
 800072c:	3750      	adds	r7, #80	@ 0x50
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	40023800 	.word	0x40023800
 8000738:	40007000 	.word	0x40007000

0800073c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000740:	4b0f      	ldr	r3, [pc, #60]	@ (8000780 <MX_RTC_Init+0x44>)
 8000742:	4a10      	ldr	r2, [pc, #64]	@ (8000784 <MX_RTC_Init+0x48>)
 8000744:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000746:	4b0e      	ldr	r3, [pc, #56]	@ (8000780 <MX_RTC_Init+0x44>)
 8000748:	2200      	movs	r2, #0
 800074a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800074c:	4b0c      	ldr	r3, [pc, #48]	@ (8000780 <MX_RTC_Init+0x44>)
 800074e:	227f      	movs	r2, #127	@ 0x7f
 8000750:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000752:	4b0b      	ldr	r3, [pc, #44]	@ (8000780 <MX_RTC_Init+0x44>)
 8000754:	22ff      	movs	r2, #255	@ 0xff
 8000756:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000758:	4b09      	ldr	r3, [pc, #36]	@ (8000780 <MX_RTC_Init+0x44>)
 800075a:	2200      	movs	r2, #0
 800075c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800075e:	4b08      	ldr	r3, [pc, #32]	@ (8000780 <MX_RTC_Init+0x44>)
 8000760:	2200      	movs	r2, #0
 8000762:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000764:	4b06      	ldr	r3, [pc, #24]	@ (8000780 <MX_RTC_Init+0x44>)
 8000766:	2200      	movs	r2, #0
 8000768:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800076a:	4805      	ldr	r0, [pc, #20]	@ (8000780 <MX_RTC_Init+0x44>)
 800076c:	f001 fab2 	bl	8001cd4 <HAL_RTC_Init>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000776:	f000 f883 	bl	8000880 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	20000084 	.word	0x20000084
 8000784:	40002800 	.word	0x40002800

08000788 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800078c:	4b11      	ldr	r3, [pc, #68]	@ (80007d4 <MX_USART2_UART_Init+0x4c>)
 800078e:	4a12      	ldr	r2, [pc, #72]	@ (80007d8 <MX_USART2_UART_Init+0x50>)
 8000790:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000792:	4b10      	ldr	r3, [pc, #64]	@ (80007d4 <MX_USART2_UART_Init+0x4c>)
 8000794:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000798:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800079a:	4b0e      	ldr	r3, [pc, #56]	@ (80007d4 <MX_USART2_UART_Init+0x4c>)
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007a0:	4b0c      	ldr	r3, [pc, #48]	@ (80007d4 <MX_USART2_UART_Init+0x4c>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007a6:	4b0b      	ldr	r3, [pc, #44]	@ (80007d4 <MX_USART2_UART_Init+0x4c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007ac:	4b09      	ldr	r3, [pc, #36]	@ (80007d4 <MX_USART2_UART_Init+0x4c>)
 80007ae:	220c      	movs	r2, #12
 80007b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007b2:	4b08      	ldr	r3, [pc, #32]	@ (80007d4 <MX_USART2_UART_Init+0x4c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b8:	4b06      	ldr	r3, [pc, #24]	@ (80007d4 <MX_USART2_UART_Init+0x4c>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007be:	4805      	ldr	r0, [pc, #20]	@ (80007d4 <MX_USART2_UART_Init+0x4c>)
 80007c0:	f001 fd10 	bl	80021e4 <HAL_UART_Init>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007ca:	f000 f859 	bl	8000880 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	200000a4 	.word	0x200000a4
 80007d8:	40004400 	.word	0x40004400

080007dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b088      	sub	sp, #32
 80007e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e2:	f107 030c 	add.w	r3, r7, #12
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	605a      	str	r2, [r3, #4]
 80007ec:	609a      	str	r2, [r3, #8]
 80007ee:	60da      	str	r2, [r3, #12]
 80007f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	60bb      	str	r3, [r7, #8]
 80007f6:	4b1f      	ldr	r3, [pc, #124]	@ (8000874 <MX_GPIO_Init+0x98>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fa:	4a1e      	ldr	r2, [pc, #120]	@ (8000874 <MX_GPIO_Init+0x98>)
 80007fc:	f043 0304 	orr.w	r3, r3, #4
 8000800:	6313      	str	r3, [r2, #48]	@ 0x30
 8000802:	4b1c      	ldr	r3, [pc, #112]	@ (8000874 <MX_GPIO_Init+0x98>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000806:	f003 0304 	and.w	r3, r3, #4
 800080a:	60bb      	str	r3, [r7, #8]
 800080c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	607b      	str	r3, [r7, #4]
 8000812:	4b18      	ldr	r3, [pc, #96]	@ (8000874 <MX_GPIO_Init+0x98>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	4a17      	ldr	r2, [pc, #92]	@ (8000874 <MX_GPIO_Init+0x98>)
 8000818:	f043 0301 	orr.w	r3, r3, #1
 800081c:	6313      	str	r3, [r2, #48]	@ 0x30
 800081e:	4b15      	ldr	r3, [pc, #84]	@ (8000874 <MX_GPIO_Init+0x98>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000822:	f003 0301 	and.w	r3, r3, #1
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800082a:	2200      	movs	r2, #0
 800082c:	2120      	movs	r1, #32
 800082e:	4812      	ldr	r0, [pc, #72]	@ (8000878 <MX_GPIO_Init+0x9c>)
 8000830:	f000 fcee 	bl	8001210 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BTN_Pin */
  GPIO_InitStruct.Pin = USER_BTN_Pin;
 8000834:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000838:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800083a:	2300      	movs	r3, #0
 800083c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_BTN_GPIO_Port, &GPIO_InitStruct);
 8000842:	f107 030c 	add.w	r3, r7, #12
 8000846:	4619      	mov	r1, r3
 8000848:	480c      	ldr	r0, [pc, #48]	@ (800087c <MX_GPIO_Init+0xa0>)
 800084a:	f000 fb45 	bl	8000ed8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800084e:	2320      	movs	r3, #32
 8000850:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000852:	2301      	movs	r3, #1
 8000854:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	2300      	movs	r3, #0
 8000858:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085a:	2300      	movs	r3, #0
 800085c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800085e:	f107 030c 	add.w	r3, r7, #12
 8000862:	4619      	mov	r1, r3
 8000864:	4804      	ldr	r0, [pc, #16]	@ (8000878 <MX_GPIO_Init+0x9c>)
 8000866:	f000 fb37 	bl	8000ed8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800086a:	bf00      	nop
 800086c:	3720      	adds	r7, #32
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40023800 	.word	0x40023800
 8000878:	40020000 	.word	0x40020000
 800087c:	40020800 	.word	0x40020800

08000880 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000884:	b672      	cpsid	i
}
 8000886:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000888:	bf00      	nop
 800088a:	e7fd      	b.n	8000888 <Error_Handler+0x8>

0800088c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	607b      	str	r3, [r7, #4]
 8000896:	4b10      	ldr	r3, [pc, #64]	@ (80008d8 <HAL_MspInit+0x4c>)
 8000898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800089a:	4a0f      	ldr	r2, [pc, #60]	@ (80008d8 <HAL_MspInit+0x4c>)
 800089c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80008a2:	4b0d      	ldr	r3, [pc, #52]	@ (80008d8 <HAL_MspInit+0x4c>)
 80008a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	603b      	str	r3, [r7, #0]
 80008b2:	4b09      	ldr	r3, [pc, #36]	@ (80008d8 <HAL_MspInit+0x4c>)
 80008b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008b6:	4a08      	ldr	r2, [pc, #32]	@ (80008d8 <HAL_MspInit+0x4c>)
 80008b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80008be:	4b06      	ldr	r3, [pc, #24]	@ (80008d8 <HAL_MspInit+0x4c>)
 80008c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008c6:	603b      	str	r3, [r7, #0]
 80008c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ca:	bf00      	nop
 80008cc:	370c      	adds	r7, #12
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	40023800 	.word	0x40023800

080008dc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b088      	sub	sp, #32
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008e4:	f107 0308 	add.w	r3, r7, #8
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	605a      	str	r2, [r3, #4]
 80008ee:	609a      	str	r2, [r3, #8]
 80008f0:	60da      	str	r2, [r3, #12]
 80008f2:	611a      	str	r2, [r3, #16]
 80008f4:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	4a0c      	ldr	r2, [pc, #48]	@ (800092c <HAL_RTC_MspInit+0x50>)
 80008fc:	4293      	cmp	r3, r2
 80008fe:	d111      	bne.n	8000924 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000900:	2302      	movs	r3, #2
 8000902:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000904:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000908:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800090a:	f107 0308 	add.w	r3, r7, #8
 800090e:	4618      	mov	r0, r3
 8000910:	f001 f8f0 	bl	8001af4 <HAL_RCCEx_PeriphCLKConfig>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800091a:	f7ff ffb1 	bl	8000880 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800091e:	4b04      	ldr	r3, [pc, #16]	@ (8000930 <HAL_RTC_MspInit+0x54>)
 8000920:	2201      	movs	r2, #1
 8000922:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000924:	bf00      	nop
 8000926:	3720      	adds	r7, #32
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	40002800 	.word	0x40002800
 8000930:	42470e3c 	.word	0x42470e3c

08000934 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b08a      	sub	sp, #40	@ 0x28
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093c:	f107 0314 	add.w	r3, r7, #20
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]
 8000948:	60da      	str	r2, [r3, #12]
 800094a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a19      	ldr	r2, [pc, #100]	@ (80009b8 <HAL_UART_MspInit+0x84>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d12b      	bne.n	80009ae <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	613b      	str	r3, [r7, #16]
 800095a:	4b18      	ldr	r3, [pc, #96]	@ (80009bc <HAL_UART_MspInit+0x88>)
 800095c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800095e:	4a17      	ldr	r2, [pc, #92]	@ (80009bc <HAL_UART_MspInit+0x88>)
 8000960:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000964:	6413      	str	r3, [r2, #64]	@ 0x40
 8000966:	4b15      	ldr	r3, [pc, #84]	@ (80009bc <HAL_UART_MspInit+0x88>)
 8000968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800096a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800096e:	613b      	str	r3, [r7, #16]
 8000970:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	60fb      	str	r3, [r7, #12]
 8000976:	4b11      	ldr	r3, [pc, #68]	@ (80009bc <HAL_UART_MspInit+0x88>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097a:	4a10      	ldr	r2, [pc, #64]	@ (80009bc <HAL_UART_MspInit+0x88>)
 800097c:	f043 0301 	orr.w	r3, r3, #1
 8000980:	6313      	str	r3, [r2, #48]	@ 0x30
 8000982:	4b0e      	ldr	r3, [pc, #56]	@ (80009bc <HAL_UART_MspInit+0x88>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000986:	f003 0301 	and.w	r3, r3, #1
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800098e:	230c      	movs	r3, #12
 8000990:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000992:	2302      	movs	r3, #2
 8000994:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800099a:	2303      	movs	r3, #3
 800099c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800099e:	2307      	movs	r3, #7
 80009a0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a2:	f107 0314 	add.w	r3, r7, #20
 80009a6:	4619      	mov	r1, r3
 80009a8:	4805      	ldr	r0, [pc, #20]	@ (80009c0 <HAL_UART_MspInit+0x8c>)
 80009aa:	f000 fa95 	bl	8000ed8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009ae:	bf00      	nop
 80009b0:	3728      	adds	r7, #40	@ 0x28
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40004400 	.word	0x40004400
 80009bc:	40023800 	.word	0x40023800
 80009c0:	40020000 	.word	0x40020000

080009c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009c8:	bf00      	nop
 80009ca:	e7fd      	b.n	80009c8 <NMI_Handler+0x4>

080009cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009d0:	bf00      	nop
 80009d2:	e7fd      	b.n	80009d0 <HardFault_Handler+0x4>

080009d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009d8:	bf00      	nop
 80009da:	e7fd      	b.n	80009d8 <MemManage_Handler+0x4>

080009dc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009e0:	bf00      	nop
 80009e2:	e7fd      	b.n	80009e0 <BusFault_Handler+0x4>

080009e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009e8:	bf00      	nop
 80009ea:	e7fd      	b.n	80009e8 <UsageFault_Handler+0x4>

080009ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009f0:	bf00      	nop
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr

080009fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009fa:	b480      	push	{r7}
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009fe:	bf00      	nop
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr

08000a08 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a0c:	bf00      	nop
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr

08000a16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a16:	b580      	push	{r7, lr}
 8000a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a1a:	f000 f933 	bl	8000c84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}

08000a22 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a22:	b580      	push	{r7, lr}
 8000a24:	b086      	sub	sp, #24
 8000a26:	af00      	add	r7, sp, #0
 8000a28:	60f8      	str	r0, [r7, #12]
 8000a2a:	60b9      	str	r1, [r7, #8]
 8000a2c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a2e:	2300      	movs	r3, #0
 8000a30:	617b      	str	r3, [r7, #20]
 8000a32:	e00a      	b.n	8000a4a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a34:	f3af 8000 	nop.w
 8000a38:	4601      	mov	r1, r0
 8000a3a:	68bb      	ldr	r3, [r7, #8]
 8000a3c:	1c5a      	adds	r2, r3, #1
 8000a3e:	60ba      	str	r2, [r7, #8]
 8000a40:	b2ca      	uxtb	r2, r1
 8000a42:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	3301      	adds	r3, #1
 8000a48:	617b      	str	r3, [r7, #20]
 8000a4a:	697a      	ldr	r2, [r7, #20]
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	429a      	cmp	r2, r3
 8000a50:	dbf0      	blt.n	8000a34 <_read+0x12>
  }

  return len;
 8000a52:	687b      	ldr	r3, [r7, #4]
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	3718      	adds	r7, #24
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b086      	sub	sp, #24
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	60f8      	str	r0, [r7, #12]
 8000a64:	60b9      	str	r1, [r7, #8]
 8000a66:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a68:	2300      	movs	r3, #0
 8000a6a:	617b      	str	r3, [r7, #20]
 8000a6c:	e009      	b.n	8000a82 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a6e:	68bb      	ldr	r3, [r7, #8]
 8000a70:	1c5a      	adds	r2, r3, #1
 8000a72:	60ba      	str	r2, [r7, #8]
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	4618      	mov	r0, r3
 8000a78:	f7ff fd7a 	bl	8000570 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	3301      	adds	r3, #1
 8000a80:	617b      	str	r3, [r7, #20]
 8000a82:	697a      	ldr	r2, [r7, #20]
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	429a      	cmp	r2, r3
 8000a88:	dbf1      	blt.n	8000a6e <_write+0x12>
  }
  return len;
 8000a8a:	687b      	ldr	r3, [r7, #4]
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	3718      	adds	r7, #24
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}

08000a94 <_close>:

int _close(int file)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	370c      	adds	r7, #12
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr

08000aac <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
 8000ab4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000abc:	605a      	str	r2, [r3, #4]
  return 0;
 8000abe:	2300      	movs	r3, #0
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	370c      	adds	r7, #12
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr

08000acc <_isatty>:

int _isatty(int file)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ad4:	2301      	movs	r3, #1
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	370c      	adds	r7, #12
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr

08000ae2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	b085      	sub	sp, #20
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	60f8      	str	r0, [r7, #12]
 8000aea:	60b9      	str	r1, [r7, #8]
 8000aec:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000aee:	2300      	movs	r3, #0
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	3714      	adds	r7, #20
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr

08000afc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b086      	sub	sp, #24
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b04:	4a14      	ldr	r2, [pc, #80]	@ (8000b58 <_sbrk+0x5c>)
 8000b06:	4b15      	ldr	r3, [pc, #84]	@ (8000b5c <_sbrk+0x60>)
 8000b08:	1ad3      	subs	r3, r2, r3
 8000b0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b10:	4b13      	ldr	r3, [pc, #76]	@ (8000b60 <_sbrk+0x64>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d102      	bne.n	8000b1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b18:	4b11      	ldr	r3, [pc, #68]	@ (8000b60 <_sbrk+0x64>)
 8000b1a:	4a12      	ldr	r2, [pc, #72]	@ (8000b64 <_sbrk+0x68>)
 8000b1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b1e:	4b10      	ldr	r3, [pc, #64]	@ (8000b60 <_sbrk+0x64>)
 8000b20:	681a      	ldr	r2, [r3, #0]
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	4413      	add	r3, r2
 8000b26:	693a      	ldr	r2, [r7, #16]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	d207      	bcs.n	8000b3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b2c:	f002 f8cc 	bl	8002cc8 <__errno>
 8000b30:	4603      	mov	r3, r0
 8000b32:	220c      	movs	r2, #12
 8000b34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b36:	f04f 33ff 	mov.w	r3, #4294967295
 8000b3a:	e009      	b.n	8000b50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b3c:	4b08      	ldr	r3, [pc, #32]	@ (8000b60 <_sbrk+0x64>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b42:	4b07      	ldr	r3, [pc, #28]	@ (8000b60 <_sbrk+0x64>)
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	4413      	add	r3, r2
 8000b4a:	4a05      	ldr	r2, [pc, #20]	@ (8000b60 <_sbrk+0x64>)
 8000b4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b4e:	68fb      	ldr	r3, [r7, #12]
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	3718      	adds	r7, #24
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	20020000 	.word	0x20020000
 8000b5c:	00000400 	.word	0x00000400
 8000b60:	200000ec 	.word	0x200000ec
 8000b64:	20000240 	.word	0x20000240

08000b68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b6c:	4b06      	ldr	r3, [pc, #24]	@ (8000b88 <SystemInit+0x20>)
 8000b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b72:	4a05      	ldr	r2, [pc, #20]	@ (8000b88 <SystemInit+0x20>)
 8000b74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	e000ed00 	.word	0xe000ed00

08000b8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b8c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bc4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b90:	f7ff ffea 	bl	8000b68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b94:	480c      	ldr	r0, [pc, #48]	@ (8000bc8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b96:	490d      	ldr	r1, [pc, #52]	@ (8000bcc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b98:	4a0d      	ldr	r2, [pc, #52]	@ (8000bd0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b9c:	e002      	b.n	8000ba4 <LoopCopyDataInit>

08000b9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ba0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ba2:	3304      	adds	r3, #4

08000ba4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ba4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ba6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba8:	d3f9      	bcc.n	8000b9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000baa:	4a0a      	ldr	r2, [pc, #40]	@ (8000bd4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bac:	4c0a      	ldr	r4, [pc, #40]	@ (8000bd8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bb0:	e001      	b.n	8000bb6 <LoopFillZerobss>

08000bb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bb4:	3204      	adds	r2, #4

08000bb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb8:	d3fb      	bcc.n	8000bb2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bba:	f002 f88b 	bl	8002cd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bbe:	f7ff fd09 	bl	80005d4 <main>
  bx  lr    
 8000bc2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bc4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bcc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000bd0:	08003908 	.word	0x08003908
  ldr r2, =_sbss
 8000bd4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000bd8:	20000240 	.word	0x20000240

08000bdc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bdc:	e7fe      	b.n	8000bdc <ADC_IRQHandler>
	...

08000be0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000be4:	4b0e      	ldr	r3, [pc, #56]	@ (8000c20 <HAL_Init+0x40>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a0d      	ldr	r2, [pc, #52]	@ (8000c20 <HAL_Init+0x40>)
 8000bea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000bee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bf0:	4b0b      	ldr	r3, [pc, #44]	@ (8000c20 <HAL_Init+0x40>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a0a      	ldr	r2, [pc, #40]	@ (8000c20 <HAL_Init+0x40>)
 8000bf6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000bfa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bfc:	4b08      	ldr	r3, [pc, #32]	@ (8000c20 <HAL_Init+0x40>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a07      	ldr	r2, [pc, #28]	@ (8000c20 <HAL_Init+0x40>)
 8000c02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c08:	2003      	movs	r0, #3
 8000c0a:	f000 f931 	bl	8000e70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c0e:	200f      	movs	r0, #15
 8000c10:	f000 f808 	bl	8000c24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c14:	f7ff fe3a 	bl	800088c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c18:	2300      	movs	r3, #0
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40023c00 	.word	0x40023c00

08000c24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c2c:	4b12      	ldr	r3, [pc, #72]	@ (8000c78 <HAL_InitTick+0x54>)
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	4b12      	ldr	r3, [pc, #72]	@ (8000c7c <HAL_InitTick+0x58>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	4619      	mov	r1, r3
 8000c36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c42:	4618      	mov	r0, r3
 8000c44:	f000 f93b 	bl	8000ebe <HAL_SYSTICK_Config>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	e00e      	b.n	8000c70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2b0f      	cmp	r3, #15
 8000c56:	d80a      	bhi.n	8000c6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	6879      	ldr	r1, [r7, #4]
 8000c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c60:	f000 f911 	bl	8000e86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c64:	4a06      	ldr	r2, [pc, #24]	@ (8000c80 <HAL_InitTick+0x5c>)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	e000      	b.n	8000c70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c6e:	2301      	movs	r3, #1
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	20000000 	.word	0x20000000
 8000c7c:	20000008 	.word	0x20000008
 8000c80:	20000004 	.word	0x20000004

08000c84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c88:	4b06      	ldr	r3, [pc, #24]	@ (8000ca4 <HAL_IncTick+0x20>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	4b06      	ldr	r3, [pc, #24]	@ (8000ca8 <HAL_IncTick+0x24>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4413      	add	r3, r2
 8000c94:	4a04      	ldr	r2, [pc, #16]	@ (8000ca8 <HAL_IncTick+0x24>)
 8000c96:	6013      	str	r3, [r2, #0]
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	20000008 	.word	0x20000008
 8000ca8:	200000f0 	.word	0x200000f0

08000cac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  return uwTick;
 8000cb0:	4b03      	ldr	r3, [pc, #12]	@ (8000cc0 <HAL_GetTick+0x14>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	200000f0 	.word	0x200000f0

08000cc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ccc:	f7ff ffee 	bl	8000cac <HAL_GetTick>
 8000cd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cdc:	d005      	beq.n	8000cea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cde:	4b0a      	ldr	r3, [pc, #40]	@ (8000d08 <HAL_Delay+0x44>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	4413      	add	r3, r2
 8000ce8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000cea:	bf00      	nop
 8000cec:	f7ff ffde 	bl	8000cac <HAL_GetTick>
 8000cf0:	4602      	mov	r2, r0
 8000cf2:	68bb      	ldr	r3, [r7, #8]
 8000cf4:	1ad3      	subs	r3, r2, r3
 8000cf6:	68fa      	ldr	r2, [r7, #12]
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	d8f7      	bhi.n	8000cec <HAL_Delay+0x28>
  {
  }
}
 8000cfc:	bf00      	nop
 8000cfe:	bf00      	nop
 8000d00:	3710      	adds	r7, #16
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	20000008 	.word	0x20000008

08000d0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b085      	sub	sp, #20
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	f003 0307 	and.w	r3, r3, #7
 8000d1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d50 <__NVIC_SetPriorityGrouping+0x44>)
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d22:	68ba      	ldr	r2, [r7, #8]
 8000d24:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d28:	4013      	ands	r3, r2
 8000d2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d34:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d3e:	4a04      	ldr	r2, [pc, #16]	@ (8000d50 <__NVIC_SetPriorityGrouping+0x44>)
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	60d3      	str	r3, [r2, #12]
}
 8000d44:	bf00      	nop
 8000d46:	3714      	adds	r7, #20
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	e000ed00 	.word	0xe000ed00

08000d54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d58:	4b04      	ldr	r3, [pc, #16]	@ (8000d6c <__NVIC_GetPriorityGrouping+0x18>)
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	0a1b      	lsrs	r3, r3, #8
 8000d5e:	f003 0307 	and.w	r3, r3, #7
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	e000ed00 	.word	0xe000ed00

08000d70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	6039      	str	r1, [r7, #0]
 8000d7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	db0a      	blt.n	8000d9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	b2da      	uxtb	r2, r3
 8000d88:	490c      	ldr	r1, [pc, #48]	@ (8000dbc <__NVIC_SetPriority+0x4c>)
 8000d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8e:	0112      	lsls	r2, r2, #4
 8000d90:	b2d2      	uxtb	r2, r2
 8000d92:	440b      	add	r3, r1
 8000d94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d98:	e00a      	b.n	8000db0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	b2da      	uxtb	r2, r3
 8000d9e:	4908      	ldr	r1, [pc, #32]	@ (8000dc0 <__NVIC_SetPriority+0x50>)
 8000da0:	79fb      	ldrb	r3, [r7, #7]
 8000da2:	f003 030f 	and.w	r3, r3, #15
 8000da6:	3b04      	subs	r3, #4
 8000da8:	0112      	lsls	r2, r2, #4
 8000daa:	b2d2      	uxtb	r2, r2
 8000dac:	440b      	add	r3, r1
 8000dae:	761a      	strb	r2, [r3, #24]
}
 8000db0:	bf00      	nop
 8000db2:	370c      	adds	r7, #12
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	e000e100 	.word	0xe000e100
 8000dc0:	e000ed00 	.word	0xe000ed00

08000dc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b089      	sub	sp, #36	@ 0x24
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	60f8      	str	r0, [r7, #12]
 8000dcc:	60b9      	str	r1, [r7, #8]
 8000dce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	f003 0307 	and.w	r3, r3, #7
 8000dd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dd8:	69fb      	ldr	r3, [r7, #28]
 8000dda:	f1c3 0307 	rsb	r3, r3, #7
 8000dde:	2b04      	cmp	r3, #4
 8000de0:	bf28      	it	cs
 8000de2:	2304      	movcs	r3, #4
 8000de4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	3304      	adds	r3, #4
 8000dea:	2b06      	cmp	r3, #6
 8000dec:	d902      	bls.n	8000df4 <NVIC_EncodePriority+0x30>
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	3b03      	subs	r3, #3
 8000df2:	e000      	b.n	8000df6 <NVIC_EncodePriority+0x32>
 8000df4:	2300      	movs	r3, #0
 8000df6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dfc:	69bb      	ldr	r3, [r7, #24]
 8000dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000e02:	43da      	mvns	r2, r3
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	401a      	ands	r2, r3
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	fa01 f303 	lsl.w	r3, r1, r3
 8000e16:	43d9      	mvns	r1, r3
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e1c:	4313      	orrs	r3, r2
         );
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3724      	adds	r7, #36	@ 0x24
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
	...

08000e2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	3b01      	subs	r3, #1
 8000e38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e3c:	d301      	bcc.n	8000e42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e00f      	b.n	8000e62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e42:	4a0a      	ldr	r2, [pc, #40]	@ (8000e6c <SysTick_Config+0x40>)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	3b01      	subs	r3, #1
 8000e48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e4a:	210f      	movs	r1, #15
 8000e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e50:	f7ff ff8e 	bl	8000d70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e54:	4b05      	ldr	r3, [pc, #20]	@ (8000e6c <SysTick_Config+0x40>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e5a:	4b04      	ldr	r3, [pc, #16]	@ (8000e6c <SysTick_Config+0x40>)
 8000e5c:	2207      	movs	r2, #7
 8000e5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e60:	2300      	movs	r3, #0
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	e000e010 	.word	0xe000e010

08000e70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e78:	6878      	ldr	r0, [r7, #4]
 8000e7a:	f7ff ff47 	bl	8000d0c <__NVIC_SetPriorityGrouping>
}
 8000e7e:	bf00      	nop
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b086      	sub	sp, #24
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	60b9      	str	r1, [r7, #8]
 8000e90:	607a      	str	r2, [r7, #4]
 8000e92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e94:	2300      	movs	r3, #0
 8000e96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e98:	f7ff ff5c 	bl	8000d54 <__NVIC_GetPriorityGrouping>
 8000e9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e9e:	687a      	ldr	r2, [r7, #4]
 8000ea0:	68b9      	ldr	r1, [r7, #8]
 8000ea2:	6978      	ldr	r0, [r7, #20]
 8000ea4:	f7ff ff8e 	bl	8000dc4 <NVIC_EncodePriority>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eae:	4611      	mov	r1, r2
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f7ff ff5d 	bl	8000d70 <__NVIC_SetPriority>
}
 8000eb6:	bf00      	nop
 8000eb8:	3718      	adds	r7, #24
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b082      	sub	sp, #8
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ec6:	6878      	ldr	r0, [r7, #4]
 8000ec8:	f7ff ffb0 	bl	8000e2c <SysTick_Config>
 8000ecc:	4603      	mov	r3, r0
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
	...

08000ed8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b089      	sub	sp, #36	@ 0x24
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000eea:	2300      	movs	r3, #0
 8000eec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eee:	2300      	movs	r3, #0
 8000ef0:	61fb      	str	r3, [r7, #28]
 8000ef2:	e159      	b.n	80011a8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	697a      	ldr	r2, [r7, #20]
 8000f04:	4013      	ands	r3, r2
 8000f06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f08:	693a      	ldr	r2, [r7, #16]
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	f040 8148 	bne.w	80011a2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	f003 0303 	and.w	r3, r3, #3
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d005      	beq.n	8000f2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f26:	2b02      	cmp	r3, #2
 8000f28:	d130      	bne.n	8000f8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	689b      	ldr	r3, [r3, #8]
 8000f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	2203      	movs	r2, #3
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	43db      	mvns	r3, r3
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	4013      	ands	r3, r2
 8000f40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	68da      	ldr	r2, [r3, #12]
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4e:	69ba      	ldr	r2, [r7, #24]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f60:	2201      	movs	r2, #1
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	091b      	lsrs	r3, r3, #4
 8000f76:	f003 0201 	and.w	r2, r3, #1
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	4313      	orrs	r3, r2
 8000f84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f003 0303 	and.w	r3, r3, #3
 8000f94:	2b03      	cmp	r3, #3
 8000f96:	d017      	beq.n	8000fc8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	2203      	movs	r2, #3
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	4013      	ands	r3, r2
 8000fae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	689a      	ldr	r2, [r3, #8]
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	005b      	lsls	r3, r3, #1
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f003 0303 	and.w	r3, r3, #3
 8000fd0:	2b02      	cmp	r3, #2
 8000fd2:	d123      	bne.n	800101c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	08da      	lsrs	r2, r3, #3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	3208      	adds	r2, #8
 8000fdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	f003 0307 	and.w	r3, r3, #7
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	220f      	movs	r2, #15
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	691a      	ldr	r2, [r3, #16]
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	f003 0307 	and.w	r3, r3, #7
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	4313      	orrs	r3, r2
 800100c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	08da      	lsrs	r2, r3, #3
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	3208      	adds	r2, #8
 8001016:	69b9      	ldr	r1, [r7, #24]
 8001018:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	2203      	movs	r2, #3
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	43db      	mvns	r3, r3
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	4013      	ands	r3, r2
 8001032:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f003 0203 	and.w	r2, r3, #3
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	4313      	orrs	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001058:	2b00      	cmp	r3, #0
 800105a:	f000 80a2 	beq.w	80011a2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	60fb      	str	r3, [r7, #12]
 8001062:	4b57      	ldr	r3, [pc, #348]	@ (80011c0 <HAL_GPIO_Init+0x2e8>)
 8001064:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001066:	4a56      	ldr	r2, [pc, #344]	@ (80011c0 <HAL_GPIO_Init+0x2e8>)
 8001068:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800106c:	6453      	str	r3, [r2, #68]	@ 0x44
 800106e:	4b54      	ldr	r3, [pc, #336]	@ (80011c0 <HAL_GPIO_Init+0x2e8>)
 8001070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001072:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800107a:	4a52      	ldr	r2, [pc, #328]	@ (80011c4 <HAL_GPIO_Init+0x2ec>)
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	089b      	lsrs	r3, r3, #2
 8001080:	3302      	adds	r3, #2
 8001082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001086:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	f003 0303 	and.w	r3, r3, #3
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	220f      	movs	r2, #15
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	43db      	mvns	r3, r3
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	4013      	ands	r3, r2
 800109c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a49      	ldr	r2, [pc, #292]	@ (80011c8 <HAL_GPIO_Init+0x2f0>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d019      	beq.n	80010da <HAL_GPIO_Init+0x202>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a48      	ldr	r2, [pc, #288]	@ (80011cc <HAL_GPIO_Init+0x2f4>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d013      	beq.n	80010d6 <HAL_GPIO_Init+0x1fe>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a47      	ldr	r2, [pc, #284]	@ (80011d0 <HAL_GPIO_Init+0x2f8>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d00d      	beq.n	80010d2 <HAL_GPIO_Init+0x1fa>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a46      	ldr	r2, [pc, #280]	@ (80011d4 <HAL_GPIO_Init+0x2fc>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d007      	beq.n	80010ce <HAL_GPIO_Init+0x1f6>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a45      	ldr	r2, [pc, #276]	@ (80011d8 <HAL_GPIO_Init+0x300>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d101      	bne.n	80010ca <HAL_GPIO_Init+0x1f2>
 80010c6:	2304      	movs	r3, #4
 80010c8:	e008      	b.n	80010dc <HAL_GPIO_Init+0x204>
 80010ca:	2307      	movs	r3, #7
 80010cc:	e006      	b.n	80010dc <HAL_GPIO_Init+0x204>
 80010ce:	2303      	movs	r3, #3
 80010d0:	e004      	b.n	80010dc <HAL_GPIO_Init+0x204>
 80010d2:	2302      	movs	r3, #2
 80010d4:	e002      	b.n	80010dc <HAL_GPIO_Init+0x204>
 80010d6:	2301      	movs	r3, #1
 80010d8:	e000      	b.n	80010dc <HAL_GPIO_Init+0x204>
 80010da:	2300      	movs	r3, #0
 80010dc:	69fa      	ldr	r2, [r7, #28]
 80010de:	f002 0203 	and.w	r2, r2, #3
 80010e2:	0092      	lsls	r2, r2, #2
 80010e4:	4093      	lsls	r3, r2
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010ec:	4935      	ldr	r1, [pc, #212]	@ (80011c4 <HAL_GPIO_Init+0x2ec>)
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	089b      	lsrs	r3, r3, #2
 80010f2:	3302      	adds	r3, #2
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010fa:	4b38      	ldr	r3, [pc, #224]	@ (80011dc <HAL_GPIO_Init+0x304>)
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	43db      	mvns	r3, r3
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	4013      	ands	r3, r2
 8001108:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001112:	2b00      	cmp	r3, #0
 8001114:	d003      	beq.n	800111e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	4313      	orrs	r3, r2
 800111c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800111e:	4a2f      	ldr	r2, [pc, #188]	@ (80011dc <HAL_GPIO_Init+0x304>)
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001124:	4b2d      	ldr	r3, [pc, #180]	@ (80011dc <HAL_GPIO_Init+0x304>)
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	43db      	mvns	r3, r3
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	4013      	ands	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800113c:	2b00      	cmp	r3, #0
 800113e:	d003      	beq.n	8001148 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	4313      	orrs	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001148:	4a24      	ldr	r2, [pc, #144]	@ (80011dc <HAL_GPIO_Init+0x304>)
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800114e:	4b23      	ldr	r3, [pc, #140]	@ (80011dc <HAL_GPIO_Init+0x304>)
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	43db      	mvns	r3, r3
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	4013      	ands	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001166:	2b00      	cmp	r3, #0
 8001168:	d003      	beq.n	8001172 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	4313      	orrs	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001172:	4a1a      	ldr	r2, [pc, #104]	@ (80011dc <HAL_GPIO_Init+0x304>)
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001178:	4b18      	ldr	r3, [pc, #96]	@ (80011dc <HAL_GPIO_Init+0x304>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	43db      	mvns	r3, r3
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	4013      	ands	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001190:	2b00      	cmp	r3, #0
 8001192:	d003      	beq.n	800119c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	4313      	orrs	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800119c:	4a0f      	ldr	r2, [pc, #60]	@ (80011dc <HAL_GPIO_Init+0x304>)
 800119e:	69bb      	ldr	r3, [r7, #24]
 80011a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	3301      	adds	r3, #1
 80011a6:	61fb      	str	r3, [r7, #28]
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	2b0f      	cmp	r3, #15
 80011ac:	f67f aea2 	bls.w	8000ef4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011b0:	bf00      	nop
 80011b2:	bf00      	nop
 80011b4:	3724      	adds	r7, #36	@ 0x24
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	40023800 	.word	0x40023800
 80011c4:	40013800 	.word	0x40013800
 80011c8:	40020000 	.word	0x40020000
 80011cc:	40020400 	.word	0x40020400
 80011d0:	40020800 	.word	0x40020800
 80011d4:	40020c00 	.word	0x40020c00
 80011d8:	40021000 	.word	0x40021000
 80011dc:	40013c00 	.word	0x40013c00

080011e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b085      	sub	sp, #20
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	460b      	mov	r3, r1
 80011ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	691a      	ldr	r2, [r3, #16]
 80011f0:	887b      	ldrh	r3, [r7, #2]
 80011f2:	4013      	ands	r3, r2
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d002      	beq.n	80011fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80011f8:	2301      	movs	r3, #1
 80011fa:	73fb      	strb	r3, [r7, #15]
 80011fc:	e001      	b.n	8001202 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80011fe:	2300      	movs	r3, #0
 8001200:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001202:	7bfb      	ldrb	r3, [r7, #15]
}
 8001204:	4618      	mov	r0, r3
 8001206:	3714      	adds	r7, #20
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr

08001210 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	460b      	mov	r3, r1
 800121a:	807b      	strh	r3, [r7, #2]
 800121c:	4613      	mov	r3, r2
 800121e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001220:	787b      	ldrb	r3, [r7, #1]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d003      	beq.n	800122e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001226:	887a      	ldrh	r2, [r7, #2]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800122c:	e003      	b.n	8001236 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800122e:	887b      	ldrh	r3, [r7, #2]
 8001230:	041a      	lsls	r2, r3, #16
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	619a      	str	r2, [r3, #24]
}
 8001236:	bf00      	nop
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
	...

08001244 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b086      	sub	sp, #24
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d101      	bne.n	8001256 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e267      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	2b00      	cmp	r3, #0
 8001260:	d075      	beq.n	800134e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001262:	4b88      	ldr	r3, [pc, #544]	@ (8001484 <HAL_RCC_OscConfig+0x240>)
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	f003 030c 	and.w	r3, r3, #12
 800126a:	2b04      	cmp	r3, #4
 800126c:	d00c      	beq.n	8001288 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800126e:	4b85      	ldr	r3, [pc, #532]	@ (8001484 <HAL_RCC_OscConfig+0x240>)
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001276:	2b08      	cmp	r3, #8
 8001278:	d112      	bne.n	80012a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800127a:	4b82      	ldr	r3, [pc, #520]	@ (8001484 <HAL_RCC_OscConfig+0x240>)
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001282:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001286:	d10b      	bne.n	80012a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001288:	4b7e      	ldr	r3, [pc, #504]	@ (8001484 <HAL_RCC_OscConfig+0x240>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001290:	2b00      	cmp	r3, #0
 8001292:	d05b      	beq.n	800134c <HAL_RCC_OscConfig+0x108>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d157      	bne.n	800134c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800129c:	2301      	movs	r3, #1
 800129e:	e242      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012a8:	d106      	bne.n	80012b8 <HAL_RCC_OscConfig+0x74>
 80012aa:	4b76      	ldr	r3, [pc, #472]	@ (8001484 <HAL_RCC_OscConfig+0x240>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a75      	ldr	r2, [pc, #468]	@ (8001484 <HAL_RCC_OscConfig+0x240>)
 80012b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012b4:	6013      	str	r3, [r2, #0]
 80012b6:	e01d      	b.n	80012f4 <HAL_RCC_OscConfig+0xb0>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80012c0:	d10c      	bne.n	80012dc <HAL_RCC_OscConfig+0x98>
 80012c2:	4b70      	ldr	r3, [pc, #448]	@ (8001484 <HAL_RCC_OscConfig+0x240>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a6f      	ldr	r2, [pc, #444]	@ (8001484 <HAL_RCC_OscConfig+0x240>)
 80012c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012cc:	6013      	str	r3, [r2, #0]
 80012ce:	4b6d      	ldr	r3, [pc, #436]	@ (8001484 <HAL_RCC_OscConfig+0x240>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a6c      	ldr	r2, [pc, #432]	@ (8001484 <HAL_RCC_OscConfig+0x240>)
 80012d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012d8:	6013      	str	r3, [r2, #0]
 80012da:	e00b      	b.n	80012f4 <HAL_RCC_OscConfig+0xb0>
 80012dc:	4b69      	ldr	r3, [pc, #420]	@ (8001484 <HAL_RCC_OscConfig+0x240>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a68      	ldr	r2, [pc, #416]	@ (8001484 <HAL_RCC_OscConfig+0x240>)
 80012e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012e6:	6013      	str	r3, [r2, #0]
 80012e8:	4b66      	ldr	r3, [pc, #408]	@ (8001484 <HAL_RCC_OscConfig+0x240>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a65      	ldr	r2, [pc, #404]	@ (8001484 <HAL_RCC_OscConfig+0x240>)
 80012ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d013      	beq.n	8001324 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012fc:	f7ff fcd6 	bl	8000cac <HAL_GetTick>
 8001300:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001302:	e008      	b.n	8001316 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001304:	f7ff fcd2 	bl	8000cac <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	2b64      	cmp	r3, #100	@ 0x64
 8001310:	d901      	bls.n	8001316 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001312:	2303      	movs	r3, #3
 8001314:	e207      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001316:	4b5b      	ldr	r3, [pc, #364]	@ (8001484 <HAL_RCC_OscConfig+0x240>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d0f0      	beq.n	8001304 <HAL_RCC_OscConfig+0xc0>
 8001322:	e014      	b.n	800134e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001324:	f7ff fcc2 	bl	8000cac <HAL_GetTick>
 8001328:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800132a:	e008      	b.n	800133e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800132c:	f7ff fcbe 	bl	8000cac <HAL_GetTick>
 8001330:	4602      	mov	r2, r0
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	2b64      	cmp	r3, #100	@ 0x64
 8001338:	d901      	bls.n	800133e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800133a:	2303      	movs	r3, #3
 800133c:	e1f3      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800133e:	4b51      	ldr	r3, [pc, #324]	@ (8001484 <HAL_RCC_OscConfig+0x240>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d1f0      	bne.n	800132c <HAL_RCC_OscConfig+0xe8>
 800134a:	e000      	b.n	800134e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800134c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 0302 	and.w	r3, r3, #2
 8001356:	2b00      	cmp	r3, #0
 8001358:	d063      	beq.n	8001422 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800135a:	4b4a      	ldr	r3, [pc, #296]	@ (8001484 <HAL_RCC_OscConfig+0x240>)
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	f003 030c 	and.w	r3, r3, #12
 8001362:	2b00      	cmp	r3, #0
 8001364:	d00b      	beq.n	800137e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001366:	4b47      	ldr	r3, [pc, #284]	@ (8001484 <HAL_RCC_OscConfig+0x240>)
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800136e:	2b08      	cmp	r3, #8
 8001370:	d11c      	bne.n	80013ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001372:	4b44      	ldr	r3, [pc, #272]	@ (8001484 <HAL_RCC_OscConfig+0x240>)
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d116      	bne.n	80013ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800137e:	4b41      	ldr	r3, [pc, #260]	@ (8001484 <HAL_RCC_OscConfig+0x240>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	2b00      	cmp	r3, #0
 8001388:	d005      	beq.n	8001396 <HAL_RCC_OscConfig+0x152>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	68db      	ldr	r3, [r3, #12]
 800138e:	2b01      	cmp	r3, #1
 8001390:	d001      	beq.n	8001396 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e1c7      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001396:	4b3b      	ldr	r3, [pc, #236]	@ (8001484 <HAL_RCC_OscConfig+0x240>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	691b      	ldr	r3, [r3, #16]
 80013a2:	00db      	lsls	r3, r3, #3
 80013a4:	4937      	ldr	r1, [pc, #220]	@ (8001484 <HAL_RCC_OscConfig+0x240>)
 80013a6:	4313      	orrs	r3, r2
 80013a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013aa:	e03a      	b.n	8001422 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d020      	beq.n	80013f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013b4:	4b34      	ldr	r3, [pc, #208]	@ (8001488 <HAL_RCC_OscConfig+0x244>)
 80013b6:	2201      	movs	r2, #1
 80013b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ba:	f7ff fc77 	bl	8000cac <HAL_GetTick>
 80013be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013c0:	e008      	b.n	80013d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013c2:	f7ff fc73 	bl	8000cac <HAL_GetTick>
 80013c6:	4602      	mov	r2, r0
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d901      	bls.n	80013d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013d0:	2303      	movs	r3, #3
 80013d2:	e1a8      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013d4:	4b2b      	ldr	r3, [pc, #172]	@ (8001484 <HAL_RCC_OscConfig+0x240>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f003 0302 	and.w	r3, r3, #2
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d0f0      	beq.n	80013c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013e0:	4b28      	ldr	r3, [pc, #160]	@ (8001484 <HAL_RCC_OscConfig+0x240>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	691b      	ldr	r3, [r3, #16]
 80013ec:	00db      	lsls	r3, r3, #3
 80013ee:	4925      	ldr	r1, [pc, #148]	@ (8001484 <HAL_RCC_OscConfig+0x240>)
 80013f0:	4313      	orrs	r3, r2
 80013f2:	600b      	str	r3, [r1, #0]
 80013f4:	e015      	b.n	8001422 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013f6:	4b24      	ldr	r3, [pc, #144]	@ (8001488 <HAL_RCC_OscConfig+0x244>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013fc:	f7ff fc56 	bl	8000cac <HAL_GetTick>
 8001400:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001402:	e008      	b.n	8001416 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001404:	f7ff fc52 	bl	8000cac <HAL_GetTick>
 8001408:	4602      	mov	r2, r0
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	2b02      	cmp	r3, #2
 8001410:	d901      	bls.n	8001416 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001412:	2303      	movs	r3, #3
 8001414:	e187      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001416:	4b1b      	ldr	r3, [pc, #108]	@ (8001484 <HAL_RCC_OscConfig+0x240>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 0302 	and.w	r3, r3, #2
 800141e:	2b00      	cmp	r3, #0
 8001420:	d1f0      	bne.n	8001404 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 0308 	and.w	r3, r3, #8
 800142a:	2b00      	cmp	r3, #0
 800142c:	d036      	beq.n	800149c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	695b      	ldr	r3, [r3, #20]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d016      	beq.n	8001464 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001436:	4b15      	ldr	r3, [pc, #84]	@ (800148c <HAL_RCC_OscConfig+0x248>)
 8001438:	2201      	movs	r2, #1
 800143a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800143c:	f7ff fc36 	bl	8000cac <HAL_GetTick>
 8001440:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001442:	e008      	b.n	8001456 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001444:	f7ff fc32 	bl	8000cac <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	2b02      	cmp	r3, #2
 8001450:	d901      	bls.n	8001456 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001452:	2303      	movs	r3, #3
 8001454:	e167      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001456:	4b0b      	ldr	r3, [pc, #44]	@ (8001484 <HAL_RCC_OscConfig+0x240>)
 8001458:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800145a:	f003 0302 	and.w	r3, r3, #2
 800145e:	2b00      	cmp	r3, #0
 8001460:	d0f0      	beq.n	8001444 <HAL_RCC_OscConfig+0x200>
 8001462:	e01b      	b.n	800149c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001464:	4b09      	ldr	r3, [pc, #36]	@ (800148c <HAL_RCC_OscConfig+0x248>)
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800146a:	f7ff fc1f 	bl	8000cac <HAL_GetTick>
 800146e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001470:	e00e      	b.n	8001490 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001472:	f7ff fc1b 	bl	8000cac <HAL_GetTick>
 8001476:	4602      	mov	r2, r0
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	2b02      	cmp	r3, #2
 800147e:	d907      	bls.n	8001490 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001480:	2303      	movs	r3, #3
 8001482:	e150      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
 8001484:	40023800 	.word	0x40023800
 8001488:	42470000 	.word	0x42470000
 800148c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001490:	4b88      	ldr	r3, [pc, #544]	@ (80016b4 <HAL_RCC_OscConfig+0x470>)
 8001492:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001494:	f003 0302 	and.w	r3, r3, #2
 8001498:	2b00      	cmp	r3, #0
 800149a:	d1ea      	bne.n	8001472 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 0304 	and.w	r3, r3, #4
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	f000 8097 	beq.w	80015d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014aa:	2300      	movs	r3, #0
 80014ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014ae:	4b81      	ldr	r3, [pc, #516]	@ (80016b4 <HAL_RCC_OscConfig+0x470>)
 80014b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d10f      	bne.n	80014da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	60bb      	str	r3, [r7, #8]
 80014be:	4b7d      	ldr	r3, [pc, #500]	@ (80016b4 <HAL_RCC_OscConfig+0x470>)
 80014c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c2:	4a7c      	ldr	r2, [pc, #496]	@ (80016b4 <HAL_RCC_OscConfig+0x470>)
 80014c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80014ca:	4b7a      	ldr	r3, [pc, #488]	@ (80016b4 <HAL_RCC_OscConfig+0x470>)
 80014cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014d2:	60bb      	str	r3, [r7, #8]
 80014d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014d6:	2301      	movs	r3, #1
 80014d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014da:	4b77      	ldr	r3, [pc, #476]	@ (80016b8 <HAL_RCC_OscConfig+0x474>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d118      	bne.n	8001518 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014e6:	4b74      	ldr	r3, [pc, #464]	@ (80016b8 <HAL_RCC_OscConfig+0x474>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a73      	ldr	r2, [pc, #460]	@ (80016b8 <HAL_RCC_OscConfig+0x474>)
 80014ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014f2:	f7ff fbdb 	bl	8000cac <HAL_GetTick>
 80014f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014f8:	e008      	b.n	800150c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014fa:	f7ff fbd7 	bl	8000cac <HAL_GetTick>
 80014fe:	4602      	mov	r2, r0
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	2b02      	cmp	r3, #2
 8001506:	d901      	bls.n	800150c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001508:	2303      	movs	r3, #3
 800150a:	e10c      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800150c:	4b6a      	ldr	r3, [pc, #424]	@ (80016b8 <HAL_RCC_OscConfig+0x474>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001514:	2b00      	cmp	r3, #0
 8001516:	d0f0      	beq.n	80014fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	2b01      	cmp	r3, #1
 800151e:	d106      	bne.n	800152e <HAL_RCC_OscConfig+0x2ea>
 8001520:	4b64      	ldr	r3, [pc, #400]	@ (80016b4 <HAL_RCC_OscConfig+0x470>)
 8001522:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001524:	4a63      	ldr	r2, [pc, #396]	@ (80016b4 <HAL_RCC_OscConfig+0x470>)
 8001526:	f043 0301 	orr.w	r3, r3, #1
 800152a:	6713      	str	r3, [r2, #112]	@ 0x70
 800152c:	e01c      	b.n	8001568 <HAL_RCC_OscConfig+0x324>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	2b05      	cmp	r3, #5
 8001534:	d10c      	bne.n	8001550 <HAL_RCC_OscConfig+0x30c>
 8001536:	4b5f      	ldr	r3, [pc, #380]	@ (80016b4 <HAL_RCC_OscConfig+0x470>)
 8001538:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800153a:	4a5e      	ldr	r2, [pc, #376]	@ (80016b4 <HAL_RCC_OscConfig+0x470>)
 800153c:	f043 0304 	orr.w	r3, r3, #4
 8001540:	6713      	str	r3, [r2, #112]	@ 0x70
 8001542:	4b5c      	ldr	r3, [pc, #368]	@ (80016b4 <HAL_RCC_OscConfig+0x470>)
 8001544:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001546:	4a5b      	ldr	r2, [pc, #364]	@ (80016b4 <HAL_RCC_OscConfig+0x470>)
 8001548:	f043 0301 	orr.w	r3, r3, #1
 800154c:	6713      	str	r3, [r2, #112]	@ 0x70
 800154e:	e00b      	b.n	8001568 <HAL_RCC_OscConfig+0x324>
 8001550:	4b58      	ldr	r3, [pc, #352]	@ (80016b4 <HAL_RCC_OscConfig+0x470>)
 8001552:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001554:	4a57      	ldr	r2, [pc, #348]	@ (80016b4 <HAL_RCC_OscConfig+0x470>)
 8001556:	f023 0301 	bic.w	r3, r3, #1
 800155a:	6713      	str	r3, [r2, #112]	@ 0x70
 800155c:	4b55      	ldr	r3, [pc, #340]	@ (80016b4 <HAL_RCC_OscConfig+0x470>)
 800155e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001560:	4a54      	ldr	r2, [pc, #336]	@ (80016b4 <HAL_RCC_OscConfig+0x470>)
 8001562:	f023 0304 	bic.w	r3, r3, #4
 8001566:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d015      	beq.n	800159c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001570:	f7ff fb9c 	bl	8000cac <HAL_GetTick>
 8001574:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001576:	e00a      	b.n	800158e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001578:	f7ff fb98 	bl	8000cac <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001586:	4293      	cmp	r3, r2
 8001588:	d901      	bls.n	800158e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e0cb      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800158e:	4b49      	ldr	r3, [pc, #292]	@ (80016b4 <HAL_RCC_OscConfig+0x470>)
 8001590:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	2b00      	cmp	r3, #0
 8001598:	d0ee      	beq.n	8001578 <HAL_RCC_OscConfig+0x334>
 800159a:	e014      	b.n	80015c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800159c:	f7ff fb86 	bl	8000cac <HAL_GetTick>
 80015a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015a2:	e00a      	b.n	80015ba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015a4:	f7ff fb82 	bl	8000cac <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d901      	bls.n	80015ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e0b5      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015ba:	4b3e      	ldr	r3, [pc, #248]	@ (80016b4 <HAL_RCC_OscConfig+0x470>)
 80015bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015be:	f003 0302 	and.w	r3, r3, #2
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d1ee      	bne.n	80015a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015c6:	7dfb      	ldrb	r3, [r7, #23]
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d105      	bne.n	80015d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015cc:	4b39      	ldr	r3, [pc, #228]	@ (80016b4 <HAL_RCC_OscConfig+0x470>)
 80015ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015d0:	4a38      	ldr	r2, [pc, #224]	@ (80016b4 <HAL_RCC_OscConfig+0x470>)
 80015d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80015d6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	699b      	ldr	r3, [r3, #24]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	f000 80a1 	beq.w	8001724 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015e2:	4b34      	ldr	r3, [pc, #208]	@ (80016b4 <HAL_RCC_OscConfig+0x470>)
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	f003 030c 	and.w	r3, r3, #12
 80015ea:	2b08      	cmp	r3, #8
 80015ec:	d05c      	beq.n	80016a8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	699b      	ldr	r3, [r3, #24]
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d141      	bne.n	800167a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015f6:	4b31      	ldr	r3, [pc, #196]	@ (80016bc <HAL_RCC_OscConfig+0x478>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015fc:	f7ff fb56 	bl	8000cac <HAL_GetTick>
 8001600:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001602:	e008      	b.n	8001616 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001604:	f7ff fb52 	bl	8000cac <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	2b02      	cmp	r3, #2
 8001610:	d901      	bls.n	8001616 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	e087      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001616:	4b27      	ldr	r3, [pc, #156]	@ (80016b4 <HAL_RCC_OscConfig+0x470>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d1f0      	bne.n	8001604 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	69da      	ldr	r2, [r3, #28]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6a1b      	ldr	r3, [r3, #32]
 800162a:	431a      	orrs	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001630:	019b      	lsls	r3, r3, #6
 8001632:	431a      	orrs	r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001638:	085b      	lsrs	r3, r3, #1
 800163a:	3b01      	subs	r3, #1
 800163c:	041b      	lsls	r3, r3, #16
 800163e:	431a      	orrs	r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001644:	061b      	lsls	r3, r3, #24
 8001646:	491b      	ldr	r1, [pc, #108]	@ (80016b4 <HAL_RCC_OscConfig+0x470>)
 8001648:	4313      	orrs	r3, r2
 800164a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800164c:	4b1b      	ldr	r3, [pc, #108]	@ (80016bc <HAL_RCC_OscConfig+0x478>)
 800164e:	2201      	movs	r2, #1
 8001650:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001652:	f7ff fb2b 	bl	8000cac <HAL_GetTick>
 8001656:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001658:	e008      	b.n	800166c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800165a:	f7ff fb27 	bl	8000cac <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	2b02      	cmp	r3, #2
 8001666:	d901      	bls.n	800166c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001668:	2303      	movs	r3, #3
 800166a:	e05c      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800166c:	4b11      	ldr	r3, [pc, #68]	@ (80016b4 <HAL_RCC_OscConfig+0x470>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d0f0      	beq.n	800165a <HAL_RCC_OscConfig+0x416>
 8001678:	e054      	b.n	8001724 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800167a:	4b10      	ldr	r3, [pc, #64]	@ (80016bc <HAL_RCC_OscConfig+0x478>)
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001680:	f7ff fb14 	bl	8000cac <HAL_GetTick>
 8001684:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001686:	e008      	b.n	800169a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001688:	f7ff fb10 	bl	8000cac <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b02      	cmp	r3, #2
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e045      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800169a:	4b06      	ldr	r3, [pc, #24]	@ (80016b4 <HAL_RCC_OscConfig+0x470>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d1f0      	bne.n	8001688 <HAL_RCC_OscConfig+0x444>
 80016a6:	e03d      	b.n	8001724 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	699b      	ldr	r3, [r3, #24]
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d107      	bne.n	80016c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e038      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
 80016b4:	40023800 	.word	0x40023800
 80016b8:	40007000 	.word	0x40007000
 80016bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001730 <HAL_RCC_OscConfig+0x4ec>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	699b      	ldr	r3, [r3, #24]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d028      	beq.n	8001720 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016d8:	429a      	cmp	r2, r3
 80016da:	d121      	bne.n	8001720 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d11a      	bne.n	8001720 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016ea:	68fa      	ldr	r2, [r7, #12]
 80016ec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80016f0:	4013      	ands	r3, r2
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80016f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d111      	bne.n	8001720 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001706:	085b      	lsrs	r3, r3, #1
 8001708:	3b01      	subs	r3, #1
 800170a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800170c:	429a      	cmp	r2, r3
 800170e:	d107      	bne.n	8001720 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800171a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800171c:	429a      	cmp	r2, r3
 800171e:	d001      	beq.n	8001724 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e000      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	3718      	adds	r7, #24
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40023800 	.word	0x40023800

08001734 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d101      	bne.n	8001748 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e0cc      	b.n	80018e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001748:	4b68      	ldr	r3, [pc, #416]	@ (80018ec <HAL_RCC_ClockConfig+0x1b8>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0307 	and.w	r3, r3, #7
 8001750:	683a      	ldr	r2, [r7, #0]
 8001752:	429a      	cmp	r2, r3
 8001754:	d90c      	bls.n	8001770 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001756:	4b65      	ldr	r3, [pc, #404]	@ (80018ec <HAL_RCC_ClockConfig+0x1b8>)
 8001758:	683a      	ldr	r2, [r7, #0]
 800175a:	b2d2      	uxtb	r2, r2
 800175c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800175e:	4b63      	ldr	r3, [pc, #396]	@ (80018ec <HAL_RCC_ClockConfig+0x1b8>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0307 	and.w	r3, r3, #7
 8001766:	683a      	ldr	r2, [r7, #0]
 8001768:	429a      	cmp	r2, r3
 800176a:	d001      	beq.n	8001770 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	e0b8      	b.n	80018e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0302 	and.w	r3, r3, #2
 8001778:	2b00      	cmp	r3, #0
 800177a:	d020      	beq.n	80017be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0304 	and.w	r3, r3, #4
 8001784:	2b00      	cmp	r3, #0
 8001786:	d005      	beq.n	8001794 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001788:	4b59      	ldr	r3, [pc, #356]	@ (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	4a58      	ldr	r2, [pc, #352]	@ (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 800178e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001792:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 0308 	and.w	r3, r3, #8
 800179c:	2b00      	cmp	r3, #0
 800179e:	d005      	beq.n	80017ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017a0:	4b53      	ldr	r3, [pc, #332]	@ (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	4a52      	ldr	r2, [pc, #328]	@ (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 80017a6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80017aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017ac:	4b50      	ldr	r3, [pc, #320]	@ (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	494d      	ldr	r1, [pc, #308]	@ (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 80017ba:	4313      	orrs	r3, r2
 80017bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d044      	beq.n	8001854 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d107      	bne.n	80017e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017d2:	4b47      	ldr	r3, [pc, #284]	@ (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d119      	bne.n	8001812 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e07f      	b.n	80018e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d003      	beq.n	80017f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017ee:	2b03      	cmp	r3, #3
 80017f0:	d107      	bne.n	8001802 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017f2:	4b3f      	ldr	r3, [pc, #252]	@ (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d109      	bne.n	8001812 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e06f      	b.n	80018e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001802:	4b3b      	ldr	r3, [pc, #236]	@ (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0302 	and.w	r3, r3, #2
 800180a:	2b00      	cmp	r3, #0
 800180c:	d101      	bne.n	8001812 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e067      	b.n	80018e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001812:	4b37      	ldr	r3, [pc, #220]	@ (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	f023 0203 	bic.w	r2, r3, #3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	4934      	ldr	r1, [pc, #208]	@ (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001820:	4313      	orrs	r3, r2
 8001822:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001824:	f7ff fa42 	bl	8000cac <HAL_GetTick>
 8001828:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800182a:	e00a      	b.n	8001842 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800182c:	f7ff fa3e 	bl	8000cac <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	f241 3288 	movw	r2, #5000	@ 0x1388
 800183a:	4293      	cmp	r3, r2
 800183c:	d901      	bls.n	8001842 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e04f      	b.n	80018e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001842:	4b2b      	ldr	r3, [pc, #172]	@ (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	f003 020c 	and.w	r2, r3, #12
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	429a      	cmp	r2, r3
 8001852:	d1eb      	bne.n	800182c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001854:	4b25      	ldr	r3, [pc, #148]	@ (80018ec <HAL_RCC_ClockConfig+0x1b8>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 0307 	and.w	r3, r3, #7
 800185c:	683a      	ldr	r2, [r7, #0]
 800185e:	429a      	cmp	r2, r3
 8001860:	d20c      	bcs.n	800187c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001862:	4b22      	ldr	r3, [pc, #136]	@ (80018ec <HAL_RCC_ClockConfig+0x1b8>)
 8001864:	683a      	ldr	r2, [r7, #0]
 8001866:	b2d2      	uxtb	r2, r2
 8001868:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800186a:	4b20      	ldr	r3, [pc, #128]	@ (80018ec <HAL_RCC_ClockConfig+0x1b8>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0307 	and.w	r3, r3, #7
 8001872:	683a      	ldr	r2, [r7, #0]
 8001874:	429a      	cmp	r2, r3
 8001876:	d001      	beq.n	800187c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e032      	b.n	80018e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0304 	and.w	r3, r3, #4
 8001884:	2b00      	cmp	r3, #0
 8001886:	d008      	beq.n	800189a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001888:	4b19      	ldr	r3, [pc, #100]	@ (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	4916      	ldr	r1, [pc, #88]	@ (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001896:	4313      	orrs	r3, r2
 8001898:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0308 	and.w	r3, r3, #8
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d009      	beq.n	80018ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018a6:	4b12      	ldr	r3, [pc, #72]	@ (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	691b      	ldr	r3, [r3, #16]
 80018b2:	00db      	lsls	r3, r3, #3
 80018b4:	490e      	ldr	r1, [pc, #56]	@ (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 80018b6:	4313      	orrs	r3, r2
 80018b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018ba:	f000 f821 	bl	8001900 <HAL_RCC_GetSysClockFreq>
 80018be:	4602      	mov	r2, r0
 80018c0:	4b0b      	ldr	r3, [pc, #44]	@ (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	091b      	lsrs	r3, r3, #4
 80018c6:	f003 030f 	and.w	r3, r3, #15
 80018ca:	490a      	ldr	r1, [pc, #40]	@ (80018f4 <HAL_RCC_ClockConfig+0x1c0>)
 80018cc:	5ccb      	ldrb	r3, [r1, r3]
 80018ce:	fa22 f303 	lsr.w	r3, r2, r3
 80018d2:	4a09      	ldr	r2, [pc, #36]	@ (80018f8 <HAL_RCC_ClockConfig+0x1c4>)
 80018d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018d6:	4b09      	ldr	r3, [pc, #36]	@ (80018fc <HAL_RCC_ClockConfig+0x1c8>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4618      	mov	r0, r3
 80018dc:	f7ff f9a2 	bl	8000c24 <HAL_InitTick>

  return HAL_OK;
 80018e0:	2300      	movs	r3, #0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3710      	adds	r7, #16
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40023c00 	.word	0x40023c00
 80018f0:	40023800 	.word	0x40023800
 80018f4:	080038ac 	.word	0x080038ac
 80018f8:	20000000 	.word	0x20000000
 80018fc:	20000004 	.word	0x20000004

08001900 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001900:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001904:	b090      	sub	sp, #64	@ 0x40
 8001906:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001908:	2300      	movs	r3, #0
 800190a:	637b      	str	r3, [r7, #52]	@ 0x34
 800190c:	2300      	movs	r3, #0
 800190e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001910:	2300      	movs	r3, #0
 8001912:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001914:	2300      	movs	r3, #0
 8001916:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001918:	4b59      	ldr	r3, [pc, #356]	@ (8001a80 <HAL_RCC_GetSysClockFreq+0x180>)
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	f003 030c 	and.w	r3, r3, #12
 8001920:	2b08      	cmp	r3, #8
 8001922:	d00d      	beq.n	8001940 <HAL_RCC_GetSysClockFreq+0x40>
 8001924:	2b08      	cmp	r3, #8
 8001926:	f200 80a1 	bhi.w	8001a6c <HAL_RCC_GetSysClockFreq+0x16c>
 800192a:	2b00      	cmp	r3, #0
 800192c:	d002      	beq.n	8001934 <HAL_RCC_GetSysClockFreq+0x34>
 800192e:	2b04      	cmp	r3, #4
 8001930:	d003      	beq.n	800193a <HAL_RCC_GetSysClockFreq+0x3a>
 8001932:	e09b      	b.n	8001a6c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001934:	4b53      	ldr	r3, [pc, #332]	@ (8001a84 <HAL_RCC_GetSysClockFreq+0x184>)
 8001936:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8001938:	e09b      	b.n	8001a72 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800193a:	4b53      	ldr	r3, [pc, #332]	@ (8001a88 <HAL_RCC_GetSysClockFreq+0x188>)
 800193c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800193e:	e098      	b.n	8001a72 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001940:	4b4f      	ldr	r3, [pc, #316]	@ (8001a80 <HAL_RCC_GetSysClockFreq+0x180>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001948:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800194a:	4b4d      	ldr	r3, [pc, #308]	@ (8001a80 <HAL_RCC_GetSysClockFreq+0x180>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d028      	beq.n	80019a8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001956:	4b4a      	ldr	r3, [pc, #296]	@ (8001a80 <HAL_RCC_GetSysClockFreq+0x180>)
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	099b      	lsrs	r3, r3, #6
 800195c:	2200      	movs	r2, #0
 800195e:	623b      	str	r3, [r7, #32]
 8001960:	627a      	str	r2, [r7, #36]	@ 0x24
 8001962:	6a3b      	ldr	r3, [r7, #32]
 8001964:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001968:	2100      	movs	r1, #0
 800196a:	4b47      	ldr	r3, [pc, #284]	@ (8001a88 <HAL_RCC_GetSysClockFreq+0x188>)
 800196c:	fb03 f201 	mul.w	r2, r3, r1
 8001970:	2300      	movs	r3, #0
 8001972:	fb00 f303 	mul.w	r3, r0, r3
 8001976:	4413      	add	r3, r2
 8001978:	4a43      	ldr	r2, [pc, #268]	@ (8001a88 <HAL_RCC_GetSysClockFreq+0x188>)
 800197a:	fba0 1202 	umull	r1, r2, r0, r2
 800197e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001980:	460a      	mov	r2, r1
 8001982:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001984:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001986:	4413      	add	r3, r2
 8001988:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800198a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800198c:	2200      	movs	r2, #0
 800198e:	61bb      	str	r3, [r7, #24]
 8001990:	61fa      	str	r2, [r7, #28]
 8001992:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001996:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800199a:	f7fe fc71 	bl	8000280 <__aeabi_uldivmod>
 800199e:	4602      	mov	r2, r0
 80019a0:	460b      	mov	r3, r1
 80019a2:	4613      	mov	r3, r2
 80019a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80019a6:	e053      	b.n	8001a50 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019a8:	4b35      	ldr	r3, [pc, #212]	@ (8001a80 <HAL_RCC_GetSysClockFreq+0x180>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	099b      	lsrs	r3, r3, #6
 80019ae:	2200      	movs	r2, #0
 80019b0:	613b      	str	r3, [r7, #16]
 80019b2:	617a      	str	r2, [r7, #20]
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80019ba:	f04f 0b00 	mov.w	fp, #0
 80019be:	4652      	mov	r2, sl
 80019c0:	465b      	mov	r3, fp
 80019c2:	f04f 0000 	mov.w	r0, #0
 80019c6:	f04f 0100 	mov.w	r1, #0
 80019ca:	0159      	lsls	r1, r3, #5
 80019cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019d0:	0150      	lsls	r0, r2, #5
 80019d2:	4602      	mov	r2, r0
 80019d4:	460b      	mov	r3, r1
 80019d6:	ebb2 080a 	subs.w	r8, r2, sl
 80019da:	eb63 090b 	sbc.w	r9, r3, fp
 80019de:	f04f 0200 	mov.w	r2, #0
 80019e2:	f04f 0300 	mov.w	r3, #0
 80019e6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80019ea:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80019ee:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80019f2:	ebb2 0408 	subs.w	r4, r2, r8
 80019f6:	eb63 0509 	sbc.w	r5, r3, r9
 80019fa:	f04f 0200 	mov.w	r2, #0
 80019fe:	f04f 0300 	mov.w	r3, #0
 8001a02:	00eb      	lsls	r3, r5, #3
 8001a04:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a08:	00e2      	lsls	r2, r4, #3
 8001a0a:	4614      	mov	r4, r2
 8001a0c:	461d      	mov	r5, r3
 8001a0e:	eb14 030a 	adds.w	r3, r4, sl
 8001a12:	603b      	str	r3, [r7, #0]
 8001a14:	eb45 030b 	adc.w	r3, r5, fp
 8001a18:	607b      	str	r3, [r7, #4]
 8001a1a:	f04f 0200 	mov.w	r2, #0
 8001a1e:	f04f 0300 	mov.w	r3, #0
 8001a22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a26:	4629      	mov	r1, r5
 8001a28:	028b      	lsls	r3, r1, #10
 8001a2a:	4621      	mov	r1, r4
 8001a2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a30:	4621      	mov	r1, r4
 8001a32:	028a      	lsls	r2, r1, #10
 8001a34:	4610      	mov	r0, r2
 8001a36:	4619      	mov	r1, r3
 8001a38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	60bb      	str	r3, [r7, #8]
 8001a3e:	60fa      	str	r2, [r7, #12]
 8001a40:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a44:	f7fe fc1c 	bl	8000280 <__aeabi_uldivmod>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a50:	4b0b      	ldr	r3, [pc, #44]	@ (8001a80 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	0c1b      	lsrs	r3, r3, #16
 8001a56:	f003 0303 	and.w	r3, r3, #3
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8001a60:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a68:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001a6a:	e002      	b.n	8001a72 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a6c:	4b05      	ldr	r3, [pc, #20]	@ (8001a84 <HAL_RCC_GetSysClockFreq+0x184>)
 8001a6e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001a70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3740      	adds	r7, #64	@ 0x40
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a7e:	bf00      	nop
 8001a80:	40023800 	.word	0x40023800
 8001a84:	00f42400 	.word	0x00f42400
 8001a88:	017d7840 	.word	0x017d7840

08001a8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a90:	4b03      	ldr	r3, [pc, #12]	@ (8001aa0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a92:	681b      	ldr	r3, [r3, #0]
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	20000000 	.word	0x20000000

08001aa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001aa8:	f7ff fff0 	bl	8001a8c <HAL_RCC_GetHCLKFreq>
 8001aac:	4602      	mov	r2, r0
 8001aae:	4b05      	ldr	r3, [pc, #20]	@ (8001ac4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	0a9b      	lsrs	r3, r3, #10
 8001ab4:	f003 0307 	and.w	r3, r3, #7
 8001ab8:	4903      	ldr	r1, [pc, #12]	@ (8001ac8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001aba:	5ccb      	ldrb	r3, [r1, r3]
 8001abc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	40023800 	.word	0x40023800
 8001ac8:	080038bc 	.word	0x080038bc

08001acc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ad0:	f7ff ffdc 	bl	8001a8c <HAL_RCC_GetHCLKFreq>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	4b05      	ldr	r3, [pc, #20]	@ (8001aec <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	0b5b      	lsrs	r3, r3, #13
 8001adc:	f003 0307 	and.w	r3, r3, #7
 8001ae0:	4903      	ldr	r1, [pc, #12]	@ (8001af0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ae2:	5ccb      	ldrb	r3, [r1, r3]
 8001ae4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	40023800 	.word	0x40023800
 8001af0:	080038bc 	.word	0x080038bc

08001af4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b086      	sub	sp, #24
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001afc:	2300      	movs	r3, #0
 8001afe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8001b00:	2300      	movs	r3, #0
 8001b02:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0301 	and.w	r3, r3, #1
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d105      	bne.n	8001b1c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d038      	beq.n	8001b8e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001b1c:	4b68      	ldr	r3, [pc, #416]	@ (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001b22:	f7ff f8c3 	bl	8000cac <HAL_GetTick>
 8001b26:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001b28:	e008      	b.n	8001b3c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001b2a:	f7ff f8bf 	bl	8000cac <HAL_GetTick>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d901      	bls.n	8001b3c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e0bd      	b.n	8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001b3c:	4b61      	ldr	r3, [pc, #388]	@ (8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d1f0      	bne.n	8001b2a <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	685a      	ldr	r2, [r3, #4]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	019b      	lsls	r3, r3, #6
 8001b52:	431a      	orrs	r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	071b      	lsls	r3, r3, #28
 8001b5a:	495a      	ldr	r1, [pc, #360]	@ (8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001b62:	4b57      	ldr	r3, [pc, #348]	@ (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001b64:	2201      	movs	r2, #1
 8001b66:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001b68:	f7ff f8a0 	bl	8000cac <HAL_GetTick>
 8001b6c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001b6e:	e008      	b.n	8001b82 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001b70:	f7ff f89c 	bl	8000cac <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e09a      	b.n	8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001b82:	4b50      	ldr	r3, [pc, #320]	@ (8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d0f0      	beq.n	8001b70 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	f000 8083 	beq.w	8001ca2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	60fb      	str	r3, [r7, #12]
 8001ba0:	4b48      	ldr	r3, [pc, #288]	@ (8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba4:	4a47      	ldr	r2, [pc, #284]	@ (8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ba6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001baa:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bac:	4b45      	ldr	r3, [pc, #276]	@ (8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bb4:	60fb      	str	r3, [r7, #12]
 8001bb6:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001bb8:	4b43      	ldr	r3, [pc, #268]	@ (8001cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a42      	ldr	r2, [pc, #264]	@ (8001cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001bbe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bc2:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001bc4:	f7ff f872 	bl	8000cac <HAL_GetTick>
 8001bc8:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001bca:	e008      	b.n	8001bde <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001bcc:	f7ff f86e 	bl	8000cac <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e06c      	b.n	8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001bde:	4b3a      	ldr	r3, [pc, #232]	@ (8001cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d0f0      	beq.n	8001bcc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001bea:	4b36      	ldr	r3, [pc, #216]	@ (8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001bf2:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d02f      	beq.n	8001c5a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	691b      	ldr	r3, [r3, #16]
 8001bfe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d028      	beq.n	8001c5a <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001c08:	4b2e      	ldr	r3, [pc, #184]	@ (8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c0c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001c10:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001c12:	4b2e      	ldr	r3, [pc, #184]	@ (8001ccc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001c14:	2201      	movs	r2, #1
 8001c16:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001c18:	4b2c      	ldr	r3, [pc, #176]	@ (8001ccc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001c1e:	4a29      	ldr	r2, [pc, #164]	@ (8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001c24:	4b27      	ldr	r3, [pc, #156]	@ (8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c28:	f003 0301 	and.w	r3, r3, #1
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d114      	bne.n	8001c5a <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001c30:	f7ff f83c 	bl	8000cac <HAL_GetTick>
 8001c34:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c36:	e00a      	b.n	8001c4e <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c38:	f7ff f838 	bl	8000cac <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e034      	b.n	8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c4e:	4b1d      	ldr	r3, [pc, #116]	@ (8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d0ee      	beq.n	8001c38 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	691b      	ldr	r3, [r3, #16]
 8001c5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c62:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001c66:	d10d      	bne.n	8001c84 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8001c68:	4b16      	ldr	r3, [pc, #88]	@ (8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	691b      	ldr	r3, [r3, #16]
 8001c74:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8001c78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001c7c:	4911      	ldr	r1, [pc, #68]	@ (8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	608b      	str	r3, [r1, #8]
 8001c82:	e005      	b.n	8001c90 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8001c84:	4b0f      	ldr	r3, [pc, #60]	@ (8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	4a0e      	ldr	r2, [pc, #56]	@ (8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c8a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8001c8e:	6093      	str	r3, [r2, #8]
 8001c90:	4b0c      	ldr	r3, [pc, #48]	@ (8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c92:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	691b      	ldr	r3, [r3, #16]
 8001c98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c9c:	4909      	ldr	r1, [pc, #36]	@ (8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0308 	and.w	r3, r3, #8
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d003      	beq.n	8001cb6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	7d1a      	ldrb	r2, [r3, #20]
 8001cb2:	4b07      	ldr	r3, [pc, #28]	@ (8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8001cb4:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8001cb6:	2300      	movs	r3, #0
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3718      	adds	r7, #24
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	42470068 	.word	0x42470068
 8001cc4:	40023800 	.word	0x40023800
 8001cc8:	40007000 	.word	0x40007000
 8001ccc:	42470e40 	.word	0x42470e40
 8001cd0:	424711e0 	.word	0x424711e0

08001cd4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d101      	bne.n	8001cea <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e073      	b.n	8001dd2 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	7f5b      	ldrb	r3, [r3, #29]
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d105      	bne.n	8001d00 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f7fe fdee 	bl	80008dc <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2202      	movs	r2, #2
 8001d04:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	f003 0310 	and.w	r3, r3, #16
 8001d10:	2b10      	cmp	r3, #16
 8001d12:	d055      	beq.n	8001dc0 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	22ca      	movs	r2, #202	@ 0xca
 8001d1a:	625a      	str	r2, [r3, #36]	@ 0x24
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2253      	movs	r2, #83	@ 0x53
 8001d22:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f000 f9c5 	bl	80020b4 <RTC_EnterInitMode>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8001d2e:	7bfb      	ldrb	r3, [r7, #15]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d12c      	bne.n	8001d8e <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	6812      	ldr	r2, [r2, #0]
 8001d3e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8001d42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001d46:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	6899      	ldr	r1, [r3, #8]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685a      	ldr	r2, [r3, #4]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	691b      	ldr	r3, [r3, #16]
 8001d56:	431a      	orrs	r2, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	695b      	ldr	r3, [r3, #20]
 8001d5c:	431a      	orrs	r2, r3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	430a      	orrs	r2, r1
 8001d64:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	68d2      	ldr	r2, [r2, #12]
 8001d6e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	6919      	ldr	r1, [r3, #16]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	041a      	lsls	r2, r3, #16
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	430a      	orrs	r2, r1
 8001d82:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f000 f9cc 	bl	8002122 <RTC_ExitInitMode>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8001d8e:	7bfb      	ldrb	r3, [r7, #15]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d110      	bne.n	8001db6 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001da2:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	699a      	ldr	r2, [r3, #24]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	430a      	orrs	r2, r1
 8001db4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	22ff      	movs	r2, #255	@ 0xff
 8001dbc:	625a      	str	r2, [r3, #36]	@ 0x24
 8001dbe:	e001      	b.n	8001dc4 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8001dc4:	7bfb      	ldrb	r3, [r7, #15]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d102      	bne.n	8001dd0 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2201      	movs	r2, #1
 8001dce:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8001dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3710      	adds	r7, #16
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001dda:	b590      	push	{r4, r7, lr}
 8001ddc:	b087      	sub	sp, #28
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	60f8      	str	r0, [r7, #12]
 8001de2:	60b9      	str	r1, [r7, #8]
 8001de4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8001de6:	2300      	movs	r3, #0
 8001de8:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	7f1b      	ldrb	r3, [r3, #28]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d101      	bne.n	8001df6 <HAL_RTC_SetTime+0x1c>
 8001df2:	2302      	movs	r3, #2
 8001df4:	e087      	b.n	8001f06 <HAL_RTC_SetTime+0x12c>
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2201      	movs	r2, #1
 8001dfa:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2202      	movs	r2, #2
 8001e00:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d126      	bne.n	8001e56 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d102      	bne.n	8001e1c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f000 f9a3 	bl	800216c <RTC_ByteToBcd2>
 8001e26:	4603      	mov	r3, r0
 8001e28:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	785b      	ldrb	r3, [r3, #1]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f000 f99c 	bl	800216c <RTC_ByteToBcd2>
 8001e34:	4603      	mov	r3, r0
 8001e36:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8001e38:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	789b      	ldrb	r3, [r3, #2]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f000 f994 	bl	800216c <RTC_ByteToBcd2>
 8001e44:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8001e46:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	78db      	ldrb	r3, [r3, #3]
 8001e4e:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8001e50:	4313      	orrs	r3, r2
 8001e52:	617b      	str	r3, [r7, #20]
 8001e54:	e018      	b.n	8001e88 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d102      	bne.n	8001e6a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	2200      	movs	r2, #0
 8001e68:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	785b      	ldrb	r3, [r3, #1]
 8001e74:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8001e76:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8001e78:	68ba      	ldr	r2, [r7, #8]
 8001e7a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8001e7c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	78db      	ldrb	r3, [r3, #3]
 8001e82:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8001e84:	4313      	orrs	r3, r2
 8001e86:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	22ca      	movs	r2, #202	@ 0xca
 8001e8e:	625a      	str	r2, [r3, #36]	@ 0x24
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2253      	movs	r2, #83	@ 0x53
 8001e96:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8001e98:	68f8      	ldr	r0, [r7, #12]
 8001e9a:	f000 f90b 	bl	80020b4 <RTC_EnterInitMode>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8001ea2:	7cfb      	ldrb	r3, [r7, #19]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d120      	bne.n	8001eea <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8001eb2:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8001eb6:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	689a      	ldr	r2, [r3, #8]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001ec6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	6899      	ldr	r1, [r3, #8]
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	68da      	ldr	r2, [r3, #12]
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	691b      	ldr	r3, [r3, #16]
 8001ed6:	431a      	orrs	r2, r3
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	430a      	orrs	r2, r1
 8001ede:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8001ee0:	68f8      	ldr	r0, [r7, #12]
 8001ee2:	f000 f91e 	bl	8002122 <RTC_ExitInitMode>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8001eea:	7cfb      	ldrb	r3, [r7, #19]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d102      	bne.n	8001ef6 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	22ff      	movs	r2, #255	@ 0xff
 8001efc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2200      	movs	r2, #0
 8001f02:	771a      	strb	r2, [r3, #28]

  return status;
 8001f04:	7cfb      	ldrb	r3, [r7, #19]
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	371c      	adds	r7, #28
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd90      	pop	{r4, r7, pc}

08001f0e <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b086      	sub	sp, #24
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	60f8      	str	r0, [r7, #12]
 8001f16:	60b9      	str	r1, [r7, #8]
 8001f18:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	691b      	ldr	r3, [r3, #16]
 8001f2e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8001f40:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8001f44:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	0c1b      	lsrs	r3, r3, #16
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001f50:	b2da      	uxtb	r2, r3
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	0a1b      	lsrs	r3, r3, #8
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001f60:	b2da      	uxtb	r2, r3
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001f6e:	b2da      	uxtb	r2, r3
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	0d9b      	lsrs	r3, r3, #22
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	f003 0301 	and.w	r3, r3, #1
 8001f7e:	b2da      	uxtb	r2, r3
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d11a      	bne.n	8001fc0 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f000 f90a 	bl	80021a8 <RTC_Bcd2ToByte>
 8001f94:	4603      	mov	r3, r0
 8001f96:	461a      	mov	r2, r3
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	785b      	ldrb	r3, [r3, #1]
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f000 f901 	bl	80021a8 <RTC_Bcd2ToByte>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	461a      	mov	r2, r3
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	789b      	ldrb	r3, [r3, #2]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f000 f8f8 	bl	80021a8 <RTC_Bcd2ToByte>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	461a      	mov	r2, r3
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3718      	adds	r7, #24
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b086      	sub	sp, #24
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	60f8      	str	r0, [r7, #12]
 8001fd2:	60b9      	str	r1, [r7, #8]
 8001fd4:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8001fe4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8001fe8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	0c1b      	lsrs	r3, r3, #16
 8001fee:	b2da      	uxtb	r2, r3
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	0a1b      	lsrs	r3, r3, #8
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	f003 031f 	and.w	r3, r3, #31
 8001ffe:	b2da      	uxtb	r2, r3
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	b2db      	uxtb	r3, r3
 8002008:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800200c:	b2da      	uxtb	r2, r3
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	0b5b      	lsrs	r3, r3, #13
 8002016:	b2db      	uxtb	r3, r3
 8002018:	f003 0307 	and.w	r3, r3, #7
 800201c:	b2da      	uxtb	r2, r3
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d11a      	bne.n	800205e <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	78db      	ldrb	r3, [r3, #3]
 800202c:	4618      	mov	r0, r3
 800202e:	f000 f8bb 	bl	80021a8 <RTC_Bcd2ToByte>
 8002032:	4603      	mov	r3, r0
 8002034:	461a      	mov	r2, r3
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	785b      	ldrb	r3, [r3, #1]
 800203e:	4618      	mov	r0, r3
 8002040:	f000 f8b2 	bl	80021a8 <RTC_Bcd2ToByte>
 8002044:	4603      	mov	r3, r0
 8002046:	461a      	mov	r2, r3
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	789b      	ldrb	r3, [r3, #2]
 8002050:	4618      	mov	r0, r3
 8002052:	f000 f8a9 	bl	80021a8 <RTC_Bcd2ToByte>
 8002056:	4603      	mov	r3, r0
 8002058:	461a      	mov	r2, r3
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800205e:	2300      	movs	r3, #0
}
 8002060:	4618      	mov	r0, r3
 8002062:	3718      	adds	r7, #24
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}

08002068 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002070:	2300      	movs	r3, #0
 8002072:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a0d      	ldr	r2, [pc, #52]	@ (80020b0 <HAL_RTC_WaitForSynchro+0x48>)
 800207a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800207c:	f7fe fe16 	bl	8000cac <HAL_GetTick>
 8002080:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002082:	e009      	b.n	8002098 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002084:	f7fe fe12 	bl	8000cac <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002092:	d901      	bls.n	8002098 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e007      	b.n	80020a8 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	f003 0320 	and.w	r3, r3, #32
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d0ee      	beq.n	8002084 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80020a6:	2300      	movs	r3, #0
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3710      	adds	r7, #16
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	00013f5f 	.word	0x00013f5f

080020b4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80020bc:	2300      	movs	r3, #0
 80020be:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80020c0:	2300      	movs	r3, #0
 80020c2:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d122      	bne.n	8002118 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	68da      	ldr	r2, [r3, #12]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80020e0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80020e2:	f7fe fde3 	bl	8000cac <HAL_GetTick>
 80020e6:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80020e8:	e00c      	b.n	8002104 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80020ea:	f7fe fddf 	bl	8000cac <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80020f8:	d904      	bls.n	8002104 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2204      	movs	r2, #4
 80020fe:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800210e:	2b00      	cmp	r3, #0
 8002110:	d102      	bne.n	8002118 <RTC_EnterInitMode+0x64>
 8002112:	7bfb      	ldrb	r3, [r7, #15]
 8002114:	2b01      	cmp	r3, #1
 8002116:	d1e8      	bne.n	80020ea <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002118:	7bfb      	ldrb	r3, [r7, #15]
}
 800211a:	4618      	mov	r0, r3
 800211c:	3710      	adds	r7, #16
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002122:	b580      	push	{r7, lr}
 8002124:	b084      	sub	sp, #16
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800212a:	2300      	movs	r3, #0
 800212c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	68da      	ldr	r2, [r3, #12]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800213c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	f003 0320 	and.w	r3, r3, #32
 8002148:	2b00      	cmp	r3, #0
 800214a:	d10a      	bne.n	8002162 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f7ff ff8b 	bl	8002068 <HAL_RTC_WaitForSynchro>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d004      	beq.n	8002162 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2204      	movs	r2, #4
 800215c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002162:	7bfb      	ldrb	r3, [r7, #15]
}
 8002164:	4618      	mov	r0, r3
 8002166:	3710      	adds	r7, #16
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}

0800216c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800216c:	b480      	push	{r7}
 800216e:	b085      	sub	sp, #20
 8002170:	af00      	add	r7, sp, #0
 8002172:	4603      	mov	r3, r0
 8002174:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8002176:	2300      	movs	r3, #0
 8002178:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800217a:	e005      	b.n	8002188 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	3301      	adds	r3, #1
 8002180:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8002182:	79fb      	ldrb	r3, [r7, #7]
 8002184:	3b0a      	subs	r3, #10
 8002186:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8002188:	79fb      	ldrb	r3, [r7, #7]
 800218a:	2b09      	cmp	r3, #9
 800218c:	d8f6      	bhi.n	800217c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	b2db      	uxtb	r3, r3
 8002192:	011b      	lsls	r3, r3, #4
 8002194:	b2da      	uxtb	r2, r3
 8002196:	79fb      	ldrb	r3, [r7, #7]
 8002198:	4313      	orrs	r3, r2
 800219a:	b2db      	uxtb	r3, r3
}
 800219c:	4618      	mov	r0, r3
 800219e:	3714      	adds	r7, #20
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b085      	sub	sp, #20
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	4603      	mov	r3, r0
 80021b0:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 80021b2:	2300      	movs	r3, #0
 80021b4:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 80021b6:	79fb      	ldrb	r3, [r7, #7]
 80021b8:	091b      	lsrs	r3, r3, #4
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	461a      	mov	r2, r3
 80021be:	4613      	mov	r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	4413      	add	r3, r2
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	b2da      	uxtb	r2, r3
 80021cc:	79fb      	ldrb	r3, [r7, #7]
 80021ce:	f003 030f 	and.w	r3, r3, #15
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	4413      	add	r3, r2
 80021d6:	b2db      	uxtb	r3, r3
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3714      	adds	r7, #20
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d101      	bne.n	80021f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e042      	b.n	800227c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d106      	bne.n	8002210 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f7fe fb92 	bl	8000934 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2224      	movs	r2, #36	@ 0x24
 8002214:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	68da      	ldr	r2, [r3, #12]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002226:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f000 f973 	bl	8002514 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	691a      	ldr	r2, [r3, #16]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800223c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	695a      	ldr	r2, [r3, #20]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800224c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	68da      	ldr	r2, [r3, #12]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800225c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2220      	movs	r2, #32
 8002268:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2220      	movs	r2, #32
 8002270:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800227a:	2300      	movs	r3, #0
}
 800227c:	4618      	mov	r0, r3
 800227e:	3708      	adds	r7, #8
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}

08002284 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b08a      	sub	sp, #40	@ 0x28
 8002288:	af02      	add	r7, sp, #8
 800228a:	60f8      	str	r0, [r7, #12]
 800228c:	60b9      	str	r1, [r7, #8]
 800228e:	603b      	str	r3, [r7, #0]
 8002290:	4613      	mov	r3, r2
 8002292:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002294:	2300      	movs	r3, #0
 8002296:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	2b20      	cmp	r3, #32
 80022a2:	d175      	bne.n	8002390 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d002      	beq.n	80022b0 <HAL_UART_Transmit+0x2c>
 80022aa:	88fb      	ldrh	r3, [r7, #6]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d101      	bne.n	80022b4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e06e      	b.n	8002392 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2200      	movs	r2, #0
 80022b8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2221      	movs	r2, #33	@ 0x21
 80022be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80022c2:	f7fe fcf3 	bl	8000cac <HAL_GetTick>
 80022c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	88fa      	ldrh	r2, [r7, #6]
 80022cc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	88fa      	ldrh	r2, [r7, #6]
 80022d2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80022dc:	d108      	bne.n	80022f0 <HAL_UART_Transmit+0x6c>
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	691b      	ldr	r3, [r3, #16]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d104      	bne.n	80022f0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80022e6:	2300      	movs	r3, #0
 80022e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	61bb      	str	r3, [r7, #24]
 80022ee:	e003      	b.n	80022f8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80022f4:	2300      	movs	r3, #0
 80022f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80022f8:	e02e      	b.n	8002358 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	9300      	str	r3, [sp, #0]
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	2200      	movs	r2, #0
 8002302:	2180      	movs	r1, #128	@ 0x80
 8002304:	68f8      	ldr	r0, [r7, #12]
 8002306:	f000 f848 	bl	800239a <UART_WaitOnFlagUntilTimeout>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d005      	beq.n	800231c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2220      	movs	r2, #32
 8002314:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	e03a      	b.n	8002392 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d10b      	bne.n	800233a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	881b      	ldrh	r3, [r3, #0]
 8002326:	461a      	mov	r2, r3
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002330:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	3302      	adds	r3, #2
 8002336:	61bb      	str	r3, [r7, #24]
 8002338:	e007      	b.n	800234a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	781a      	ldrb	r2, [r3, #0]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	3301      	adds	r3, #1
 8002348:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800234e:	b29b      	uxth	r3, r3
 8002350:	3b01      	subs	r3, #1
 8002352:	b29a      	uxth	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800235c:	b29b      	uxth	r3, r3
 800235e:	2b00      	cmp	r3, #0
 8002360:	d1cb      	bne.n	80022fa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	9300      	str	r3, [sp, #0]
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	2200      	movs	r2, #0
 800236a:	2140      	movs	r1, #64	@ 0x40
 800236c:	68f8      	ldr	r0, [r7, #12]
 800236e:	f000 f814 	bl	800239a <UART_WaitOnFlagUntilTimeout>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d005      	beq.n	8002384 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2220      	movs	r2, #32
 800237c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e006      	b.n	8002392 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2220      	movs	r2, #32
 8002388:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800238c:	2300      	movs	r3, #0
 800238e:	e000      	b.n	8002392 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002390:	2302      	movs	r3, #2
  }
}
 8002392:	4618      	mov	r0, r3
 8002394:	3720      	adds	r7, #32
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800239a:	b580      	push	{r7, lr}
 800239c:	b086      	sub	sp, #24
 800239e:	af00      	add	r7, sp, #0
 80023a0:	60f8      	str	r0, [r7, #12]
 80023a2:	60b9      	str	r1, [r7, #8]
 80023a4:	603b      	str	r3, [r7, #0]
 80023a6:	4613      	mov	r3, r2
 80023a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023aa:	e03b      	b.n	8002424 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023ac:	6a3b      	ldr	r3, [r7, #32]
 80023ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023b2:	d037      	beq.n	8002424 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023b4:	f7fe fc7a 	bl	8000cac <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	6a3a      	ldr	r2, [r7, #32]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d302      	bcc.n	80023ca <UART_WaitOnFlagUntilTimeout+0x30>
 80023c4:	6a3b      	ldr	r3, [r7, #32]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d101      	bne.n	80023ce <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e03a      	b.n	8002444 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	f003 0304 	and.w	r3, r3, #4
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d023      	beq.n	8002424 <UART_WaitOnFlagUntilTimeout+0x8a>
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	2b80      	cmp	r3, #128	@ 0x80
 80023e0:	d020      	beq.n	8002424 <UART_WaitOnFlagUntilTimeout+0x8a>
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	2b40      	cmp	r3, #64	@ 0x40
 80023e6:	d01d      	beq.n	8002424 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0308 	and.w	r3, r3, #8
 80023f2:	2b08      	cmp	r3, #8
 80023f4:	d116      	bne.n	8002424 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80023f6:	2300      	movs	r3, #0
 80023f8:	617b      	str	r3, [r7, #20]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	617b      	str	r3, [r7, #20]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	617b      	str	r3, [r7, #20]
 800240a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800240c:	68f8      	ldr	r0, [r7, #12]
 800240e:	f000 f81d 	bl	800244c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2208      	movs	r2, #8
 8002416:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2200      	movs	r2, #0
 800241c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e00f      	b.n	8002444 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	4013      	ands	r3, r2
 800242e:	68ba      	ldr	r2, [r7, #8]
 8002430:	429a      	cmp	r2, r3
 8002432:	bf0c      	ite	eq
 8002434:	2301      	moveq	r3, #1
 8002436:	2300      	movne	r3, #0
 8002438:	b2db      	uxtb	r3, r3
 800243a:	461a      	mov	r2, r3
 800243c:	79fb      	ldrb	r3, [r7, #7]
 800243e:	429a      	cmp	r2, r3
 8002440:	d0b4      	beq.n	80023ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002442:	2300      	movs	r3, #0
}
 8002444:	4618      	mov	r0, r3
 8002446:	3718      	adds	r7, #24
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800244c:	b480      	push	{r7}
 800244e:	b095      	sub	sp, #84	@ 0x54
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	330c      	adds	r3, #12
 800245a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800245c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800245e:	e853 3f00 	ldrex	r3, [r3]
 8002462:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002466:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800246a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	330c      	adds	r3, #12
 8002472:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002474:	643a      	str	r2, [r7, #64]	@ 0x40
 8002476:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002478:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800247a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800247c:	e841 2300 	strex	r3, r2, [r1]
 8002480:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002482:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002484:	2b00      	cmp	r3, #0
 8002486:	d1e5      	bne.n	8002454 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	3314      	adds	r3, #20
 800248e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002490:	6a3b      	ldr	r3, [r7, #32]
 8002492:	e853 3f00 	ldrex	r3, [r3]
 8002496:	61fb      	str	r3, [r7, #28]
   return(result);
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	f023 0301 	bic.w	r3, r3, #1
 800249e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	3314      	adds	r3, #20
 80024a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80024a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80024aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80024ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80024b0:	e841 2300 	strex	r3, r2, [r1]
 80024b4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80024b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d1e5      	bne.n	8002488 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d119      	bne.n	80024f8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	330c      	adds	r3, #12
 80024ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	e853 3f00 	ldrex	r3, [r3]
 80024d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	f023 0310 	bic.w	r3, r3, #16
 80024da:	647b      	str	r3, [r7, #68]	@ 0x44
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	330c      	adds	r3, #12
 80024e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80024e4:	61ba      	str	r2, [r7, #24]
 80024e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024e8:	6979      	ldr	r1, [r7, #20]
 80024ea:	69ba      	ldr	r2, [r7, #24]
 80024ec:	e841 2300 	strex	r3, r2, [r1]
 80024f0:	613b      	str	r3, [r7, #16]
   return(result);
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d1e5      	bne.n	80024c4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2220      	movs	r2, #32
 80024fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002506:	bf00      	nop
 8002508:	3754      	adds	r7, #84	@ 0x54
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
	...

08002514 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002514:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002518:	b0c0      	sub	sp, #256	@ 0x100
 800251a:	af00      	add	r7, sp, #0
 800251c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	691b      	ldr	r3, [r3, #16]
 8002528:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800252c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002530:	68d9      	ldr	r1, [r3, #12]
 8002532:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	ea40 0301 	orr.w	r3, r0, r1
 800253c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800253e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002542:	689a      	ldr	r2, [r3, #8]
 8002544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002548:	691b      	ldr	r3, [r3, #16]
 800254a:	431a      	orrs	r2, r3
 800254c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	431a      	orrs	r2, r3
 8002554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002558:	69db      	ldr	r3, [r3, #28]
 800255a:	4313      	orrs	r3, r2
 800255c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800256c:	f021 010c 	bic.w	r1, r1, #12
 8002570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800257a:	430b      	orrs	r3, r1
 800257c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800257e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	695b      	ldr	r3, [r3, #20]
 8002586:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800258a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800258e:	6999      	ldr	r1, [r3, #24]
 8002590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	ea40 0301 	orr.w	r3, r0, r1
 800259a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800259c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	4b8f      	ldr	r3, [pc, #572]	@ (80027e0 <UART_SetConfig+0x2cc>)
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d005      	beq.n	80025b4 <UART_SetConfig+0xa0>
 80025a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	4b8d      	ldr	r3, [pc, #564]	@ (80027e4 <UART_SetConfig+0x2d0>)
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d104      	bne.n	80025be <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80025b4:	f7ff fa8a 	bl	8001acc <HAL_RCC_GetPCLK2Freq>
 80025b8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80025bc:	e003      	b.n	80025c6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80025be:	f7ff fa71 	bl	8001aa4 <HAL_RCC_GetPCLK1Freq>
 80025c2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025ca:	69db      	ldr	r3, [r3, #28]
 80025cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80025d0:	f040 810c 	bne.w	80027ec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80025d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80025d8:	2200      	movs	r2, #0
 80025da:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80025de:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80025e2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80025e6:	4622      	mov	r2, r4
 80025e8:	462b      	mov	r3, r5
 80025ea:	1891      	adds	r1, r2, r2
 80025ec:	65b9      	str	r1, [r7, #88]	@ 0x58
 80025ee:	415b      	adcs	r3, r3
 80025f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80025f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80025f6:	4621      	mov	r1, r4
 80025f8:	eb12 0801 	adds.w	r8, r2, r1
 80025fc:	4629      	mov	r1, r5
 80025fe:	eb43 0901 	adc.w	r9, r3, r1
 8002602:	f04f 0200 	mov.w	r2, #0
 8002606:	f04f 0300 	mov.w	r3, #0
 800260a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800260e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002612:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002616:	4690      	mov	r8, r2
 8002618:	4699      	mov	r9, r3
 800261a:	4623      	mov	r3, r4
 800261c:	eb18 0303 	adds.w	r3, r8, r3
 8002620:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002624:	462b      	mov	r3, r5
 8002626:	eb49 0303 	adc.w	r3, r9, r3
 800262a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800262e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800263a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800263e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002642:	460b      	mov	r3, r1
 8002644:	18db      	adds	r3, r3, r3
 8002646:	653b      	str	r3, [r7, #80]	@ 0x50
 8002648:	4613      	mov	r3, r2
 800264a:	eb42 0303 	adc.w	r3, r2, r3
 800264e:	657b      	str	r3, [r7, #84]	@ 0x54
 8002650:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002654:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002658:	f7fd fe12 	bl	8000280 <__aeabi_uldivmod>
 800265c:	4602      	mov	r2, r0
 800265e:	460b      	mov	r3, r1
 8002660:	4b61      	ldr	r3, [pc, #388]	@ (80027e8 <UART_SetConfig+0x2d4>)
 8002662:	fba3 2302 	umull	r2, r3, r3, r2
 8002666:	095b      	lsrs	r3, r3, #5
 8002668:	011c      	lsls	r4, r3, #4
 800266a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800266e:	2200      	movs	r2, #0
 8002670:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002674:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002678:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800267c:	4642      	mov	r2, r8
 800267e:	464b      	mov	r3, r9
 8002680:	1891      	adds	r1, r2, r2
 8002682:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002684:	415b      	adcs	r3, r3
 8002686:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002688:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800268c:	4641      	mov	r1, r8
 800268e:	eb12 0a01 	adds.w	sl, r2, r1
 8002692:	4649      	mov	r1, r9
 8002694:	eb43 0b01 	adc.w	fp, r3, r1
 8002698:	f04f 0200 	mov.w	r2, #0
 800269c:	f04f 0300 	mov.w	r3, #0
 80026a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80026a4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80026a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80026ac:	4692      	mov	sl, r2
 80026ae:	469b      	mov	fp, r3
 80026b0:	4643      	mov	r3, r8
 80026b2:	eb1a 0303 	adds.w	r3, sl, r3
 80026b6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80026ba:	464b      	mov	r3, r9
 80026bc:	eb4b 0303 	adc.w	r3, fp, r3
 80026c0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80026c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80026d0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80026d4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80026d8:	460b      	mov	r3, r1
 80026da:	18db      	adds	r3, r3, r3
 80026dc:	643b      	str	r3, [r7, #64]	@ 0x40
 80026de:	4613      	mov	r3, r2
 80026e0:	eb42 0303 	adc.w	r3, r2, r3
 80026e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80026e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80026ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80026ee:	f7fd fdc7 	bl	8000280 <__aeabi_uldivmod>
 80026f2:	4602      	mov	r2, r0
 80026f4:	460b      	mov	r3, r1
 80026f6:	4611      	mov	r1, r2
 80026f8:	4b3b      	ldr	r3, [pc, #236]	@ (80027e8 <UART_SetConfig+0x2d4>)
 80026fa:	fba3 2301 	umull	r2, r3, r3, r1
 80026fe:	095b      	lsrs	r3, r3, #5
 8002700:	2264      	movs	r2, #100	@ 0x64
 8002702:	fb02 f303 	mul.w	r3, r2, r3
 8002706:	1acb      	subs	r3, r1, r3
 8002708:	00db      	lsls	r3, r3, #3
 800270a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800270e:	4b36      	ldr	r3, [pc, #216]	@ (80027e8 <UART_SetConfig+0x2d4>)
 8002710:	fba3 2302 	umull	r2, r3, r3, r2
 8002714:	095b      	lsrs	r3, r3, #5
 8002716:	005b      	lsls	r3, r3, #1
 8002718:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800271c:	441c      	add	r4, r3
 800271e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002722:	2200      	movs	r2, #0
 8002724:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002728:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800272c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002730:	4642      	mov	r2, r8
 8002732:	464b      	mov	r3, r9
 8002734:	1891      	adds	r1, r2, r2
 8002736:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002738:	415b      	adcs	r3, r3
 800273a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800273c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002740:	4641      	mov	r1, r8
 8002742:	1851      	adds	r1, r2, r1
 8002744:	6339      	str	r1, [r7, #48]	@ 0x30
 8002746:	4649      	mov	r1, r9
 8002748:	414b      	adcs	r3, r1
 800274a:	637b      	str	r3, [r7, #52]	@ 0x34
 800274c:	f04f 0200 	mov.w	r2, #0
 8002750:	f04f 0300 	mov.w	r3, #0
 8002754:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002758:	4659      	mov	r1, fp
 800275a:	00cb      	lsls	r3, r1, #3
 800275c:	4651      	mov	r1, sl
 800275e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002762:	4651      	mov	r1, sl
 8002764:	00ca      	lsls	r2, r1, #3
 8002766:	4610      	mov	r0, r2
 8002768:	4619      	mov	r1, r3
 800276a:	4603      	mov	r3, r0
 800276c:	4642      	mov	r2, r8
 800276e:	189b      	adds	r3, r3, r2
 8002770:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002774:	464b      	mov	r3, r9
 8002776:	460a      	mov	r2, r1
 8002778:	eb42 0303 	adc.w	r3, r2, r3
 800277c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800278c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002790:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002794:	460b      	mov	r3, r1
 8002796:	18db      	adds	r3, r3, r3
 8002798:	62bb      	str	r3, [r7, #40]	@ 0x28
 800279a:	4613      	mov	r3, r2
 800279c:	eb42 0303 	adc.w	r3, r2, r3
 80027a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80027a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80027a6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80027aa:	f7fd fd69 	bl	8000280 <__aeabi_uldivmod>
 80027ae:	4602      	mov	r2, r0
 80027b0:	460b      	mov	r3, r1
 80027b2:	4b0d      	ldr	r3, [pc, #52]	@ (80027e8 <UART_SetConfig+0x2d4>)
 80027b4:	fba3 1302 	umull	r1, r3, r3, r2
 80027b8:	095b      	lsrs	r3, r3, #5
 80027ba:	2164      	movs	r1, #100	@ 0x64
 80027bc:	fb01 f303 	mul.w	r3, r1, r3
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	00db      	lsls	r3, r3, #3
 80027c4:	3332      	adds	r3, #50	@ 0x32
 80027c6:	4a08      	ldr	r2, [pc, #32]	@ (80027e8 <UART_SetConfig+0x2d4>)
 80027c8:	fba2 2303 	umull	r2, r3, r2, r3
 80027cc:	095b      	lsrs	r3, r3, #5
 80027ce:	f003 0207 	and.w	r2, r3, #7
 80027d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4422      	add	r2, r4
 80027da:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80027dc:	e106      	b.n	80029ec <UART_SetConfig+0x4d8>
 80027de:	bf00      	nop
 80027e0:	40011000 	.word	0x40011000
 80027e4:	40011400 	.word	0x40011400
 80027e8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80027ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80027f0:	2200      	movs	r2, #0
 80027f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80027f6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80027fa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80027fe:	4642      	mov	r2, r8
 8002800:	464b      	mov	r3, r9
 8002802:	1891      	adds	r1, r2, r2
 8002804:	6239      	str	r1, [r7, #32]
 8002806:	415b      	adcs	r3, r3
 8002808:	627b      	str	r3, [r7, #36]	@ 0x24
 800280a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800280e:	4641      	mov	r1, r8
 8002810:	1854      	adds	r4, r2, r1
 8002812:	4649      	mov	r1, r9
 8002814:	eb43 0501 	adc.w	r5, r3, r1
 8002818:	f04f 0200 	mov.w	r2, #0
 800281c:	f04f 0300 	mov.w	r3, #0
 8002820:	00eb      	lsls	r3, r5, #3
 8002822:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002826:	00e2      	lsls	r2, r4, #3
 8002828:	4614      	mov	r4, r2
 800282a:	461d      	mov	r5, r3
 800282c:	4643      	mov	r3, r8
 800282e:	18e3      	adds	r3, r4, r3
 8002830:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002834:	464b      	mov	r3, r9
 8002836:	eb45 0303 	adc.w	r3, r5, r3
 800283a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800283e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800284a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800284e:	f04f 0200 	mov.w	r2, #0
 8002852:	f04f 0300 	mov.w	r3, #0
 8002856:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800285a:	4629      	mov	r1, r5
 800285c:	008b      	lsls	r3, r1, #2
 800285e:	4621      	mov	r1, r4
 8002860:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002864:	4621      	mov	r1, r4
 8002866:	008a      	lsls	r2, r1, #2
 8002868:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800286c:	f7fd fd08 	bl	8000280 <__aeabi_uldivmod>
 8002870:	4602      	mov	r2, r0
 8002872:	460b      	mov	r3, r1
 8002874:	4b60      	ldr	r3, [pc, #384]	@ (80029f8 <UART_SetConfig+0x4e4>)
 8002876:	fba3 2302 	umull	r2, r3, r3, r2
 800287a:	095b      	lsrs	r3, r3, #5
 800287c:	011c      	lsls	r4, r3, #4
 800287e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002882:	2200      	movs	r2, #0
 8002884:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002888:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800288c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002890:	4642      	mov	r2, r8
 8002892:	464b      	mov	r3, r9
 8002894:	1891      	adds	r1, r2, r2
 8002896:	61b9      	str	r1, [r7, #24]
 8002898:	415b      	adcs	r3, r3
 800289a:	61fb      	str	r3, [r7, #28]
 800289c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028a0:	4641      	mov	r1, r8
 80028a2:	1851      	adds	r1, r2, r1
 80028a4:	6139      	str	r1, [r7, #16]
 80028a6:	4649      	mov	r1, r9
 80028a8:	414b      	adcs	r3, r1
 80028aa:	617b      	str	r3, [r7, #20]
 80028ac:	f04f 0200 	mov.w	r2, #0
 80028b0:	f04f 0300 	mov.w	r3, #0
 80028b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80028b8:	4659      	mov	r1, fp
 80028ba:	00cb      	lsls	r3, r1, #3
 80028bc:	4651      	mov	r1, sl
 80028be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028c2:	4651      	mov	r1, sl
 80028c4:	00ca      	lsls	r2, r1, #3
 80028c6:	4610      	mov	r0, r2
 80028c8:	4619      	mov	r1, r3
 80028ca:	4603      	mov	r3, r0
 80028cc:	4642      	mov	r2, r8
 80028ce:	189b      	adds	r3, r3, r2
 80028d0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80028d4:	464b      	mov	r3, r9
 80028d6:	460a      	mov	r2, r1
 80028d8:	eb42 0303 	adc.w	r3, r2, r3
 80028dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80028e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80028ea:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80028ec:	f04f 0200 	mov.w	r2, #0
 80028f0:	f04f 0300 	mov.w	r3, #0
 80028f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80028f8:	4649      	mov	r1, r9
 80028fa:	008b      	lsls	r3, r1, #2
 80028fc:	4641      	mov	r1, r8
 80028fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002902:	4641      	mov	r1, r8
 8002904:	008a      	lsls	r2, r1, #2
 8002906:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800290a:	f7fd fcb9 	bl	8000280 <__aeabi_uldivmod>
 800290e:	4602      	mov	r2, r0
 8002910:	460b      	mov	r3, r1
 8002912:	4611      	mov	r1, r2
 8002914:	4b38      	ldr	r3, [pc, #224]	@ (80029f8 <UART_SetConfig+0x4e4>)
 8002916:	fba3 2301 	umull	r2, r3, r3, r1
 800291a:	095b      	lsrs	r3, r3, #5
 800291c:	2264      	movs	r2, #100	@ 0x64
 800291e:	fb02 f303 	mul.w	r3, r2, r3
 8002922:	1acb      	subs	r3, r1, r3
 8002924:	011b      	lsls	r3, r3, #4
 8002926:	3332      	adds	r3, #50	@ 0x32
 8002928:	4a33      	ldr	r2, [pc, #204]	@ (80029f8 <UART_SetConfig+0x4e4>)
 800292a:	fba2 2303 	umull	r2, r3, r2, r3
 800292e:	095b      	lsrs	r3, r3, #5
 8002930:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002934:	441c      	add	r4, r3
 8002936:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800293a:	2200      	movs	r2, #0
 800293c:	673b      	str	r3, [r7, #112]	@ 0x70
 800293e:	677a      	str	r2, [r7, #116]	@ 0x74
 8002940:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002944:	4642      	mov	r2, r8
 8002946:	464b      	mov	r3, r9
 8002948:	1891      	adds	r1, r2, r2
 800294a:	60b9      	str	r1, [r7, #8]
 800294c:	415b      	adcs	r3, r3
 800294e:	60fb      	str	r3, [r7, #12]
 8002950:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002954:	4641      	mov	r1, r8
 8002956:	1851      	adds	r1, r2, r1
 8002958:	6039      	str	r1, [r7, #0]
 800295a:	4649      	mov	r1, r9
 800295c:	414b      	adcs	r3, r1
 800295e:	607b      	str	r3, [r7, #4]
 8002960:	f04f 0200 	mov.w	r2, #0
 8002964:	f04f 0300 	mov.w	r3, #0
 8002968:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800296c:	4659      	mov	r1, fp
 800296e:	00cb      	lsls	r3, r1, #3
 8002970:	4651      	mov	r1, sl
 8002972:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002976:	4651      	mov	r1, sl
 8002978:	00ca      	lsls	r2, r1, #3
 800297a:	4610      	mov	r0, r2
 800297c:	4619      	mov	r1, r3
 800297e:	4603      	mov	r3, r0
 8002980:	4642      	mov	r2, r8
 8002982:	189b      	adds	r3, r3, r2
 8002984:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002986:	464b      	mov	r3, r9
 8002988:	460a      	mov	r2, r1
 800298a:	eb42 0303 	adc.w	r3, r2, r3
 800298e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	663b      	str	r3, [r7, #96]	@ 0x60
 800299a:	667a      	str	r2, [r7, #100]	@ 0x64
 800299c:	f04f 0200 	mov.w	r2, #0
 80029a0:	f04f 0300 	mov.w	r3, #0
 80029a4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80029a8:	4649      	mov	r1, r9
 80029aa:	008b      	lsls	r3, r1, #2
 80029ac:	4641      	mov	r1, r8
 80029ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80029b2:	4641      	mov	r1, r8
 80029b4:	008a      	lsls	r2, r1, #2
 80029b6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80029ba:	f7fd fc61 	bl	8000280 <__aeabi_uldivmod>
 80029be:	4602      	mov	r2, r0
 80029c0:	460b      	mov	r3, r1
 80029c2:	4b0d      	ldr	r3, [pc, #52]	@ (80029f8 <UART_SetConfig+0x4e4>)
 80029c4:	fba3 1302 	umull	r1, r3, r3, r2
 80029c8:	095b      	lsrs	r3, r3, #5
 80029ca:	2164      	movs	r1, #100	@ 0x64
 80029cc:	fb01 f303 	mul.w	r3, r1, r3
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	011b      	lsls	r3, r3, #4
 80029d4:	3332      	adds	r3, #50	@ 0x32
 80029d6:	4a08      	ldr	r2, [pc, #32]	@ (80029f8 <UART_SetConfig+0x4e4>)
 80029d8:	fba2 2303 	umull	r2, r3, r2, r3
 80029dc:	095b      	lsrs	r3, r3, #5
 80029de:	f003 020f 	and.w	r2, r3, #15
 80029e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4422      	add	r2, r4
 80029ea:	609a      	str	r2, [r3, #8]
}
 80029ec:	bf00      	nop
 80029ee:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80029f2:	46bd      	mov	sp, r7
 80029f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029f8:	51eb851f 	.word	0x51eb851f

080029fc <std>:
 80029fc:	2300      	movs	r3, #0
 80029fe:	b510      	push	{r4, lr}
 8002a00:	4604      	mov	r4, r0
 8002a02:	e9c0 3300 	strd	r3, r3, [r0]
 8002a06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002a0a:	6083      	str	r3, [r0, #8]
 8002a0c:	8181      	strh	r1, [r0, #12]
 8002a0e:	6643      	str	r3, [r0, #100]	@ 0x64
 8002a10:	81c2      	strh	r2, [r0, #14]
 8002a12:	6183      	str	r3, [r0, #24]
 8002a14:	4619      	mov	r1, r3
 8002a16:	2208      	movs	r2, #8
 8002a18:	305c      	adds	r0, #92	@ 0x5c
 8002a1a:	f000 f906 	bl	8002c2a <memset>
 8002a1e:	4b0d      	ldr	r3, [pc, #52]	@ (8002a54 <std+0x58>)
 8002a20:	6263      	str	r3, [r4, #36]	@ 0x24
 8002a22:	4b0d      	ldr	r3, [pc, #52]	@ (8002a58 <std+0x5c>)
 8002a24:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002a26:	4b0d      	ldr	r3, [pc, #52]	@ (8002a5c <std+0x60>)
 8002a28:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002a2a:	4b0d      	ldr	r3, [pc, #52]	@ (8002a60 <std+0x64>)
 8002a2c:	6323      	str	r3, [r4, #48]	@ 0x30
 8002a2e:	4b0d      	ldr	r3, [pc, #52]	@ (8002a64 <std+0x68>)
 8002a30:	6224      	str	r4, [r4, #32]
 8002a32:	429c      	cmp	r4, r3
 8002a34:	d006      	beq.n	8002a44 <std+0x48>
 8002a36:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002a3a:	4294      	cmp	r4, r2
 8002a3c:	d002      	beq.n	8002a44 <std+0x48>
 8002a3e:	33d0      	adds	r3, #208	@ 0xd0
 8002a40:	429c      	cmp	r4, r3
 8002a42:	d105      	bne.n	8002a50 <std+0x54>
 8002a44:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002a48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a4c:	f000 b966 	b.w	8002d1c <__retarget_lock_init_recursive>
 8002a50:	bd10      	pop	{r4, pc}
 8002a52:	bf00      	nop
 8002a54:	08002ba5 	.word	0x08002ba5
 8002a58:	08002bc7 	.word	0x08002bc7
 8002a5c:	08002bff 	.word	0x08002bff
 8002a60:	08002c23 	.word	0x08002c23
 8002a64:	200000f4 	.word	0x200000f4

08002a68 <stdio_exit_handler>:
 8002a68:	4a02      	ldr	r2, [pc, #8]	@ (8002a74 <stdio_exit_handler+0xc>)
 8002a6a:	4903      	ldr	r1, [pc, #12]	@ (8002a78 <stdio_exit_handler+0x10>)
 8002a6c:	4803      	ldr	r0, [pc, #12]	@ (8002a7c <stdio_exit_handler+0x14>)
 8002a6e:	f000 b869 	b.w	8002b44 <_fwalk_sglue>
 8002a72:	bf00      	nop
 8002a74:	2000000c 	.word	0x2000000c
 8002a78:	080035bd 	.word	0x080035bd
 8002a7c:	2000001c 	.word	0x2000001c

08002a80 <cleanup_stdio>:
 8002a80:	6841      	ldr	r1, [r0, #4]
 8002a82:	4b0c      	ldr	r3, [pc, #48]	@ (8002ab4 <cleanup_stdio+0x34>)
 8002a84:	4299      	cmp	r1, r3
 8002a86:	b510      	push	{r4, lr}
 8002a88:	4604      	mov	r4, r0
 8002a8a:	d001      	beq.n	8002a90 <cleanup_stdio+0x10>
 8002a8c:	f000 fd96 	bl	80035bc <_fflush_r>
 8002a90:	68a1      	ldr	r1, [r4, #8]
 8002a92:	4b09      	ldr	r3, [pc, #36]	@ (8002ab8 <cleanup_stdio+0x38>)
 8002a94:	4299      	cmp	r1, r3
 8002a96:	d002      	beq.n	8002a9e <cleanup_stdio+0x1e>
 8002a98:	4620      	mov	r0, r4
 8002a9a:	f000 fd8f 	bl	80035bc <_fflush_r>
 8002a9e:	68e1      	ldr	r1, [r4, #12]
 8002aa0:	4b06      	ldr	r3, [pc, #24]	@ (8002abc <cleanup_stdio+0x3c>)
 8002aa2:	4299      	cmp	r1, r3
 8002aa4:	d004      	beq.n	8002ab0 <cleanup_stdio+0x30>
 8002aa6:	4620      	mov	r0, r4
 8002aa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002aac:	f000 bd86 	b.w	80035bc <_fflush_r>
 8002ab0:	bd10      	pop	{r4, pc}
 8002ab2:	bf00      	nop
 8002ab4:	200000f4 	.word	0x200000f4
 8002ab8:	2000015c 	.word	0x2000015c
 8002abc:	200001c4 	.word	0x200001c4

08002ac0 <global_stdio_init.part.0>:
 8002ac0:	b510      	push	{r4, lr}
 8002ac2:	4b0b      	ldr	r3, [pc, #44]	@ (8002af0 <global_stdio_init.part.0+0x30>)
 8002ac4:	4c0b      	ldr	r4, [pc, #44]	@ (8002af4 <global_stdio_init.part.0+0x34>)
 8002ac6:	4a0c      	ldr	r2, [pc, #48]	@ (8002af8 <global_stdio_init.part.0+0x38>)
 8002ac8:	601a      	str	r2, [r3, #0]
 8002aca:	4620      	mov	r0, r4
 8002acc:	2200      	movs	r2, #0
 8002ace:	2104      	movs	r1, #4
 8002ad0:	f7ff ff94 	bl	80029fc <std>
 8002ad4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002ad8:	2201      	movs	r2, #1
 8002ada:	2109      	movs	r1, #9
 8002adc:	f7ff ff8e 	bl	80029fc <std>
 8002ae0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002ae4:	2202      	movs	r2, #2
 8002ae6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002aea:	2112      	movs	r1, #18
 8002aec:	f7ff bf86 	b.w	80029fc <std>
 8002af0:	2000022c 	.word	0x2000022c
 8002af4:	200000f4 	.word	0x200000f4
 8002af8:	08002a69 	.word	0x08002a69

08002afc <__sfp_lock_acquire>:
 8002afc:	4801      	ldr	r0, [pc, #4]	@ (8002b04 <__sfp_lock_acquire+0x8>)
 8002afe:	f000 b90e 	b.w	8002d1e <__retarget_lock_acquire_recursive>
 8002b02:	bf00      	nop
 8002b04:	20000235 	.word	0x20000235

08002b08 <__sfp_lock_release>:
 8002b08:	4801      	ldr	r0, [pc, #4]	@ (8002b10 <__sfp_lock_release+0x8>)
 8002b0a:	f000 b909 	b.w	8002d20 <__retarget_lock_release_recursive>
 8002b0e:	bf00      	nop
 8002b10:	20000235 	.word	0x20000235

08002b14 <__sinit>:
 8002b14:	b510      	push	{r4, lr}
 8002b16:	4604      	mov	r4, r0
 8002b18:	f7ff fff0 	bl	8002afc <__sfp_lock_acquire>
 8002b1c:	6a23      	ldr	r3, [r4, #32]
 8002b1e:	b11b      	cbz	r3, 8002b28 <__sinit+0x14>
 8002b20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b24:	f7ff bff0 	b.w	8002b08 <__sfp_lock_release>
 8002b28:	4b04      	ldr	r3, [pc, #16]	@ (8002b3c <__sinit+0x28>)
 8002b2a:	6223      	str	r3, [r4, #32]
 8002b2c:	4b04      	ldr	r3, [pc, #16]	@ (8002b40 <__sinit+0x2c>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d1f5      	bne.n	8002b20 <__sinit+0xc>
 8002b34:	f7ff ffc4 	bl	8002ac0 <global_stdio_init.part.0>
 8002b38:	e7f2      	b.n	8002b20 <__sinit+0xc>
 8002b3a:	bf00      	nop
 8002b3c:	08002a81 	.word	0x08002a81
 8002b40:	2000022c 	.word	0x2000022c

08002b44 <_fwalk_sglue>:
 8002b44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002b48:	4607      	mov	r7, r0
 8002b4a:	4688      	mov	r8, r1
 8002b4c:	4614      	mov	r4, r2
 8002b4e:	2600      	movs	r6, #0
 8002b50:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002b54:	f1b9 0901 	subs.w	r9, r9, #1
 8002b58:	d505      	bpl.n	8002b66 <_fwalk_sglue+0x22>
 8002b5a:	6824      	ldr	r4, [r4, #0]
 8002b5c:	2c00      	cmp	r4, #0
 8002b5e:	d1f7      	bne.n	8002b50 <_fwalk_sglue+0xc>
 8002b60:	4630      	mov	r0, r6
 8002b62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002b66:	89ab      	ldrh	r3, [r5, #12]
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d907      	bls.n	8002b7c <_fwalk_sglue+0x38>
 8002b6c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002b70:	3301      	adds	r3, #1
 8002b72:	d003      	beq.n	8002b7c <_fwalk_sglue+0x38>
 8002b74:	4629      	mov	r1, r5
 8002b76:	4638      	mov	r0, r7
 8002b78:	47c0      	blx	r8
 8002b7a:	4306      	orrs	r6, r0
 8002b7c:	3568      	adds	r5, #104	@ 0x68
 8002b7e:	e7e9      	b.n	8002b54 <_fwalk_sglue+0x10>

08002b80 <iprintf>:
 8002b80:	b40f      	push	{r0, r1, r2, r3}
 8002b82:	b507      	push	{r0, r1, r2, lr}
 8002b84:	4906      	ldr	r1, [pc, #24]	@ (8002ba0 <iprintf+0x20>)
 8002b86:	ab04      	add	r3, sp, #16
 8002b88:	6808      	ldr	r0, [r1, #0]
 8002b8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8002b8e:	6881      	ldr	r1, [r0, #8]
 8002b90:	9301      	str	r3, [sp, #4]
 8002b92:	f000 f9e9 	bl	8002f68 <_vfiprintf_r>
 8002b96:	b003      	add	sp, #12
 8002b98:	f85d eb04 	ldr.w	lr, [sp], #4
 8002b9c:	b004      	add	sp, #16
 8002b9e:	4770      	bx	lr
 8002ba0:	20000018 	.word	0x20000018

08002ba4 <__sread>:
 8002ba4:	b510      	push	{r4, lr}
 8002ba6:	460c      	mov	r4, r1
 8002ba8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002bac:	f000 f868 	bl	8002c80 <_read_r>
 8002bb0:	2800      	cmp	r0, #0
 8002bb2:	bfab      	itete	ge
 8002bb4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002bb6:	89a3      	ldrhlt	r3, [r4, #12]
 8002bb8:	181b      	addge	r3, r3, r0
 8002bba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002bbe:	bfac      	ite	ge
 8002bc0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002bc2:	81a3      	strhlt	r3, [r4, #12]
 8002bc4:	bd10      	pop	{r4, pc}

08002bc6 <__swrite>:
 8002bc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002bca:	461f      	mov	r7, r3
 8002bcc:	898b      	ldrh	r3, [r1, #12]
 8002bce:	05db      	lsls	r3, r3, #23
 8002bd0:	4605      	mov	r5, r0
 8002bd2:	460c      	mov	r4, r1
 8002bd4:	4616      	mov	r6, r2
 8002bd6:	d505      	bpl.n	8002be4 <__swrite+0x1e>
 8002bd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002bdc:	2302      	movs	r3, #2
 8002bde:	2200      	movs	r2, #0
 8002be0:	f000 f83c 	bl	8002c5c <_lseek_r>
 8002be4:	89a3      	ldrh	r3, [r4, #12]
 8002be6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002bea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002bee:	81a3      	strh	r3, [r4, #12]
 8002bf0:	4632      	mov	r2, r6
 8002bf2:	463b      	mov	r3, r7
 8002bf4:	4628      	mov	r0, r5
 8002bf6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002bfa:	f000 b853 	b.w	8002ca4 <_write_r>

08002bfe <__sseek>:
 8002bfe:	b510      	push	{r4, lr}
 8002c00:	460c      	mov	r4, r1
 8002c02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c06:	f000 f829 	bl	8002c5c <_lseek_r>
 8002c0a:	1c43      	adds	r3, r0, #1
 8002c0c:	89a3      	ldrh	r3, [r4, #12]
 8002c0e:	bf15      	itete	ne
 8002c10:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002c12:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002c16:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002c1a:	81a3      	strheq	r3, [r4, #12]
 8002c1c:	bf18      	it	ne
 8002c1e:	81a3      	strhne	r3, [r4, #12]
 8002c20:	bd10      	pop	{r4, pc}

08002c22 <__sclose>:
 8002c22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c26:	f000 b809 	b.w	8002c3c <_close_r>

08002c2a <memset>:
 8002c2a:	4402      	add	r2, r0
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d100      	bne.n	8002c34 <memset+0xa>
 8002c32:	4770      	bx	lr
 8002c34:	f803 1b01 	strb.w	r1, [r3], #1
 8002c38:	e7f9      	b.n	8002c2e <memset+0x4>
	...

08002c3c <_close_r>:
 8002c3c:	b538      	push	{r3, r4, r5, lr}
 8002c3e:	4d06      	ldr	r5, [pc, #24]	@ (8002c58 <_close_r+0x1c>)
 8002c40:	2300      	movs	r3, #0
 8002c42:	4604      	mov	r4, r0
 8002c44:	4608      	mov	r0, r1
 8002c46:	602b      	str	r3, [r5, #0]
 8002c48:	f7fd ff24 	bl	8000a94 <_close>
 8002c4c:	1c43      	adds	r3, r0, #1
 8002c4e:	d102      	bne.n	8002c56 <_close_r+0x1a>
 8002c50:	682b      	ldr	r3, [r5, #0]
 8002c52:	b103      	cbz	r3, 8002c56 <_close_r+0x1a>
 8002c54:	6023      	str	r3, [r4, #0]
 8002c56:	bd38      	pop	{r3, r4, r5, pc}
 8002c58:	20000230 	.word	0x20000230

08002c5c <_lseek_r>:
 8002c5c:	b538      	push	{r3, r4, r5, lr}
 8002c5e:	4d07      	ldr	r5, [pc, #28]	@ (8002c7c <_lseek_r+0x20>)
 8002c60:	4604      	mov	r4, r0
 8002c62:	4608      	mov	r0, r1
 8002c64:	4611      	mov	r1, r2
 8002c66:	2200      	movs	r2, #0
 8002c68:	602a      	str	r2, [r5, #0]
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	f7fd ff39 	bl	8000ae2 <_lseek>
 8002c70:	1c43      	adds	r3, r0, #1
 8002c72:	d102      	bne.n	8002c7a <_lseek_r+0x1e>
 8002c74:	682b      	ldr	r3, [r5, #0]
 8002c76:	b103      	cbz	r3, 8002c7a <_lseek_r+0x1e>
 8002c78:	6023      	str	r3, [r4, #0]
 8002c7a:	bd38      	pop	{r3, r4, r5, pc}
 8002c7c:	20000230 	.word	0x20000230

08002c80 <_read_r>:
 8002c80:	b538      	push	{r3, r4, r5, lr}
 8002c82:	4d07      	ldr	r5, [pc, #28]	@ (8002ca0 <_read_r+0x20>)
 8002c84:	4604      	mov	r4, r0
 8002c86:	4608      	mov	r0, r1
 8002c88:	4611      	mov	r1, r2
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	602a      	str	r2, [r5, #0]
 8002c8e:	461a      	mov	r2, r3
 8002c90:	f7fd fec7 	bl	8000a22 <_read>
 8002c94:	1c43      	adds	r3, r0, #1
 8002c96:	d102      	bne.n	8002c9e <_read_r+0x1e>
 8002c98:	682b      	ldr	r3, [r5, #0]
 8002c9a:	b103      	cbz	r3, 8002c9e <_read_r+0x1e>
 8002c9c:	6023      	str	r3, [r4, #0]
 8002c9e:	bd38      	pop	{r3, r4, r5, pc}
 8002ca0:	20000230 	.word	0x20000230

08002ca4 <_write_r>:
 8002ca4:	b538      	push	{r3, r4, r5, lr}
 8002ca6:	4d07      	ldr	r5, [pc, #28]	@ (8002cc4 <_write_r+0x20>)
 8002ca8:	4604      	mov	r4, r0
 8002caa:	4608      	mov	r0, r1
 8002cac:	4611      	mov	r1, r2
 8002cae:	2200      	movs	r2, #0
 8002cb0:	602a      	str	r2, [r5, #0]
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	f7fd fed2 	bl	8000a5c <_write>
 8002cb8:	1c43      	adds	r3, r0, #1
 8002cba:	d102      	bne.n	8002cc2 <_write_r+0x1e>
 8002cbc:	682b      	ldr	r3, [r5, #0]
 8002cbe:	b103      	cbz	r3, 8002cc2 <_write_r+0x1e>
 8002cc0:	6023      	str	r3, [r4, #0]
 8002cc2:	bd38      	pop	{r3, r4, r5, pc}
 8002cc4:	20000230 	.word	0x20000230

08002cc8 <__errno>:
 8002cc8:	4b01      	ldr	r3, [pc, #4]	@ (8002cd0 <__errno+0x8>)
 8002cca:	6818      	ldr	r0, [r3, #0]
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop
 8002cd0:	20000018 	.word	0x20000018

08002cd4 <__libc_init_array>:
 8002cd4:	b570      	push	{r4, r5, r6, lr}
 8002cd6:	4d0d      	ldr	r5, [pc, #52]	@ (8002d0c <__libc_init_array+0x38>)
 8002cd8:	4c0d      	ldr	r4, [pc, #52]	@ (8002d10 <__libc_init_array+0x3c>)
 8002cda:	1b64      	subs	r4, r4, r5
 8002cdc:	10a4      	asrs	r4, r4, #2
 8002cde:	2600      	movs	r6, #0
 8002ce0:	42a6      	cmp	r6, r4
 8002ce2:	d109      	bne.n	8002cf8 <__libc_init_array+0x24>
 8002ce4:	4d0b      	ldr	r5, [pc, #44]	@ (8002d14 <__libc_init_array+0x40>)
 8002ce6:	4c0c      	ldr	r4, [pc, #48]	@ (8002d18 <__libc_init_array+0x44>)
 8002ce8:	f000 fdb8 	bl	800385c <_init>
 8002cec:	1b64      	subs	r4, r4, r5
 8002cee:	10a4      	asrs	r4, r4, #2
 8002cf0:	2600      	movs	r6, #0
 8002cf2:	42a6      	cmp	r6, r4
 8002cf4:	d105      	bne.n	8002d02 <__libc_init_array+0x2e>
 8002cf6:	bd70      	pop	{r4, r5, r6, pc}
 8002cf8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cfc:	4798      	blx	r3
 8002cfe:	3601      	adds	r6, #1
 8002d00:	e7ee      	b.n	8002ce0 <__libc_init_array+0xc>
 8002d02:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d06:	4798      	blx	r3
 8002d08:	3601      	adds	r6, #1
 8002d0a:	e7f2      	b.n	8002cf2 <__libc_init_array+0x1e>
 8002d0c:	08003900 	.word	0x08003900
 8002d10:	08003900 	.word	0x08003900
 8002d14:	08003900 	.word	0x08003900
 8002d18:	08003904 	.word	0x08003904

08002d1c <__retarget_lock_init_recursive>:
 8002d1c:	4770      	bx	lr

08002d1e <__retarget_lock_acquire_recursive>:
 8002d1e:	4770      	bx	lr

08002d20 <__retarget_lock_release_recursive>:
 8002d20:	4770      	bx	lr
	...

08002d24 <_free_r>:
 8002d24:	b538      	push	{r3, r4, r5, lr}
 8002d26:	4605      	mov	r5, r0
 8002d28:	2900      	cmp	r1, #0
 8002d2a:	d041      	beq.n	8002db0 <_free_r+0x8c>
 8002d2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002d30:	1f0c      	subs	r4, r1, #4
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	bfb8      	it	lt
 8002d36:	18e4      	addlt	r4, r4, r3
 8002d38:	f000 f8e0 	bl	8002efc <__malloc_lock>
 8002d3c:	4a1d      	ldr	r2, [pc, #116]	@ (8002db4 <_free_r+0x90>)
 8002d3e:	6813      	ldr	r3, [r2, #0]
 8002d40:	b933      	cbnz	r3, 8002d50 <_free_r+0x2c>
 8002d42:	6063      	str	r3, [r4, #4]
 8002d44:	6014      	str	r4, [r2, #0]
 8002d46:	4628      	mov	r0, r5
 8002d48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002d4c:	f000 b8dc 	b.w	8002f08 <__malloc_unlock>
 8002d50:	42a3      	cmp	r3, r4
 8002d52:	d908      	bls.n	8002d66 <_free_r+0x42>
 8002d54:	6820      	ldr	r0, [r4, #0]
 8002d56:	1821      	adds	r1, r4, r0
 8002d58:	428b      	cmp	r3, r1
 8002d5a:	bf01      	itttt	eq
 8002d5c:	6819      	ldreq	r1, [r3, #0]
 8002d5e:	685b      	ldreq	r3, [r3, #4]
 8002d60:	1809      	addeq	r1, r1, r0
 8002d62:	6021      	streq	r1, [r4, #0]
 8002d64:	e7ed      	b.n	8002d42 <_free_r+0x1e>
 8002d66:	461a      	mov	r2, r3
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	b10b      	cbz	r3, 8002d70 <_free_r+0x4c>
 8002d6c:	42a3      	cmp	r3, r4
 8002d6e:	d9fa      	bls.n	8002d66 <_free_r+0x42>
 8002d70:	6811      	ldr	r1, [r2, #0]
 8002d72:	1850      	adds	r0, r2, r1
 8002d74:	42a0      	cmp	r0, r4
 8002d76:	d10b      	bne.n	8002d90 <_free_r+0x6c>
 8002d78:	6820      	ldr	r0, [r4, #0]
 8002d7a:	4401      	add	r1, r0
 8002d7c:	1850      	adds	r0, r2, r1
 8002d7e:	4283      	cmp	r3, r0
 8002d80:	6011      	str	r1, [r2, #0]
 8002d82:	d1e0      	bne.n	8002d46 <_free_r+0x22>
 8002d84:	6818      	ldr	r0, [r3, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	6053      	str	r3, [r2, #4]
 8002d8a:	4408      	add	r0, r1
 8002d8c:	6010      	str	r0, [r2, #0]
 8002d8e:	e7da      	b.n	8002d46 <_free_r+0x22>
 8002d90:	d902      	bls.n	8002d98 <_free_r+0x74>
 8002d92:	230c      	movs	r3, #12
 8002d94:	602b      	str	r3, [r5, #0]
 8002d96:	e7d6      	b.n	8002d46 <_free_r+0x22>
 8002d98:	6820      	ldr	r0, [r4, #0]
 8002d9a:	1821      	adds	r1, r4, r0
 8002d9c:	428b      	cmp	r3, r1
 8002d9e:	bf04      	itt	eq
 8002da0:	6819      	ldreq	r1, [r3, #0]
 8002da2:	685b      	ldreq	r3, [r3, #4]
 8002da4:	6063      	str	r3, [r4, #4]
 8002da6:	bf04      	itt	eq
 8002da8:	1809      	addeq	r1, r1, r0
 8002daa:	6021      	streq	r1, [r4, #0]
 8002dac:	6054      	str	r4, [r2, #4]
 8002dae:	e7ca      	b.n	8002d46 <_free_r+0x22>
 8002db0:	bd38      	pop	{r3, r4, r5, pc}
 8002db2:	bf00      	nop
 8002db4:	2000023c 	.word	0x2000023c

08002db8 <sbrk_aligned>:
 8002db8:	b570      	push	{r4, r5, r6, lr}
 8002dba:	4e0f      	ldr	r6, [pc, #60]	@ (8002df8 <sbrk_aligned+0x40>)
 8002dbc:	460c      	mov	r4, r1
 8002dbe:	6831      	ldr	r1, [r6, #0]
 8002dc0:	4605      	mov	r5, r0
 8002dc2:	b911      	cbnz	r1, 8002dca <sbrk_aligned+0x12>
 8002dc4:	f000 fcb6 	bl	8003734 <_sbrk_r>
 8002dc8:	6030      	str	r0, [r6, #0]
 8002dca:	4621      	mov	r1, r4
 8002dcc:	4628      	mov	r0, r5
 8002dce:	f000 fcb1 	bl	8003734 <_sbrk_r>
 8002dd2:	1c43      	adds	r3, r0, #1
 8002dd4:	d103      	bne.n	8002dde <sbrk_aligned+0x26>
 8002dd6:	f04f 34ff 	mov.w	r4, #4294967295
 8002dda:	4620      	mov	r0, r4
 8002ddc:	bd70      	pop	{r4, r5, r6, pc}
 8002dde:	1cc4      	adds	r4, r0, #3
 8002de0:	f024 0403 	bic.w	r4, r4, #3
 8002de4:	42a0      	cmp	r0, r4
 8002de6:	d0f8      	beq.n	8002dda <sbrk_aligned+0x22>
 8002de8:	1a21      	subs	r1, r4, r0
 8002dea:	4628      	mov	r0, r5
 8002dec:	f000 fca2 	bl	8003734 <_sbrk_r>
 8002df0:	3001      	adds	r0, #1
 8002df2:	d1f2      	bne.n	8002dda <sbrk_aligned+0x22>
 8002df4:	e7ef      	b.n	8002dd6 <sbrk_aligned+0x1e>
 8002df6:	bf00      	nop
 8002df8:	20000238 	.word	0x20000238

08002dfc <_malloc_r>:
 8002dfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002e00:	1ccd      	adds	r5, r1, #3
 8002e02:	f025 0503 	bic.w	r5, r5, #3
 8002e06:	3508      	adds	r5, #8
 8002e08:	2d0c      	cmp	r5, #12
 8002e0a:	bf38      	it	cc
 8002e0c:	250c      	movcc	r5, #12
 8002e0e:	2d00      	cmp	r5, #0
 8002e10:	4606      	mov	r6, r0
 8002e12:	db01      	blt.n	8002e18 <_malloc_r+0x1c>
 8002e14:	42a9      	cmp	r1, r5
 8002e16:	d904      	bls.n	8002e22 <_malloc_r+0x26>
 8002e18:	230c      	movs	r3, #12
 8002e1a:	6033      	str	r3, [r6, #0]
 8002e1c:	2000      	movs	r0, #0
 8002e1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002e22:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002ef8 <_malloc_r+0xfc>
 8002e26:	f000 f869 	bl	8002efc <__malloc_lock>
 8002e2a:	f8d8 3000 	ldr.w	r3, [r8]
 8002e2e:	461c      	mov	r4, r3
 8002e30:	bb44      	cbnz	r4, 8002e84 <_malloc_r+0x88>
 8002e32:	4629      	mov	r1, r5
 8002e34:	4630      	mov	r0, r6
 8002e36:	f7ff ffbf 	bl	8002db8 <sbrk_aligned>
 8002e3a:	1c43      	adds	r3, r0, #1
 8002e3c:	4604      	mov	r4, r0
 8002e3e:	d158      	bne.n	8002ef2 <_malloc_r+0xf6>
 8002e40:	f8d8 4000 	ldr.w	r4, [r8]
 8002e44:	4627      	mov	r7, r4
 8002e46:	2f00      	cmp	r7, #0
 8002e48:	d143      	bne.n	8002ed2 <_malloc_r+0xd6>
 8002e4a:	2c00      	cmp	r4, #0
 8002e4c:	d04b      	beq.n	8002ee6 <_malloc_r+0xea>
 8002e4e:	6823      	ldr	r3, [r4, #0]
 8002e50:	4639      	mov	r1, r7
 8002e52:	4630      	mov	r0, r6
 8002e54:	eb04 0903 	add.w	r9, r4, r3
 8002e58:	f000 fc6c 	bl	8003734 <_sbrk_r>
 8002e5c:	4581      	cmp	r9, r0
 8002e5e:	d142      	bne.n	8002ee6 <_malloc_r+0xea>
 8002e60:	6821      	ldr	r1, [r4, #0]
 8002e62:	1a6d      	subs	r5, r5, r1
 8002e64:	4629      	mov	r1, r5
 8002e66:	4630      	mov	r0, r6
 8002e68:	f7ff ffa6 	bl	8002db8 <sbrk_aligned>
 8002e6c:	3001      	adds	r0, #1
 8002e6e:	d03a      	beq.n	8002ee6 <_malloc_r+0xea>
 8002e70:	6823      	ldr	r3, [r4, #0]
 8002e72:	442b      	add	r3, r5
 8002e74:	6023      	str	r3, [r4, #0]
 8002e76:	f8d8 3000 	ldr.w	r3, [r8]
 8002e7a:	685a      	ldr	r2, [r3, #4]
 8002e7c:	bb62      	cbnz	r2, 8002ed8 <_malloc_r+0xdc>
 8002e7e:	f8c8 7000 	str.w	r7, [r8]
 8002e82:	e00f      	b.n	8002ea4 <_malloc_r+0xa8>
 8002e84:	6822      	ldr	r2, [r4, #0]
 8002e86:	1b52      	subs	r2, r2, r5
 8002e88:	d420      	bmi.n	8002ecc <_malloc_r+0xd0>
 8002e8a:	2a0b      	cmp	r2, #11
 8002e8c:	d917      	bls.n	8002ebe <_malloc_r+0xc2>
 8002e8e:	1961      	adds	r1, r4, r5
 8002e90:	42a3      	cmp	r3, r4
 8002e92:	6025      	str	r5, [r4, #0]
 8002e94:	bf18      	it	ne
 8002e96:	6059      	strne	r1, [r3, #4]
 8002e98:	6863      	ldr	r3, [r4, #4]
 8002e9a:	bf08      	it	eq
 8002e9c:	f8c8 1000 	streq.w	r1, [r8]
 8002ea0:	5162      	str	r2, [r4, r5]
 8002ea2:	604b      	str	r3, [r1, #4]
 8002ea4:	4630      	mov	r0, r6
 8002ea6:	f000 f82f 	bl	8002f08 <__malloc_unlock>
 8002eaa:	f104 000b 	add.w	r0, r4, #11
 8002eae:	1d23      	adds	r3, r4, #4
 8002eb0:	f020 0007 	bic.w	r0, r0, #7
 8002eb4:	1ac2      	subs	r2, r0, r3
 8002eb6:	bf1c      	itt	ne
 8002eb8:	1a1b      	subne	r3, r3, r0
 8002eba:	50a3      	strne	r3, [r4, r2]
 8002ebc:	e7af      	b.n	8002e1e <_malloc_r+0x22>
 8002ebe:	6862      	ldr	r2, [r4, #4]
 8002ec0:	42a3      	cmp	r3, r4
 8002ec2:	bf0c      	ite	eq
 8002ec4:	f8c8 2000 	streq.w	r2, [r8]
 8002ec8:	605a      	strne	r2, [r3, #4]
 8002eca:	e7eb      	b.n	8002ea4 <_malloc_r+0xa8>
 8002ecc:	4623      	mov	r3, r4
 8002ece:	6864      	ldr	r4, [r4, #4]
 8002ed0:	e7ae      	b.n	8002e30 <_malloc_r+0x34>
 8002ed2:	463c      	mov	r4, r7
 8002ed4:	687f      	ldr	r7, [r7, #4]
 8002ed6:	e7b6      	b.n	8002e46 <_malloc_r+0x4a>
 8002ed8:	461a      	mov	r2, r3
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	42a3      	cmp	r3, r4
 8002ede:	d1fb      	bne.n	8002ed8 <_malloc_r+0xdc>
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	6053      	str	r3, [r2, #4]
 8002ee4:	e7de      	b.n	8002ea4 <_malloc_r+0xa8>
 8002ee6:	230c      	movs	r3, #12
 8002ee8:	6033      	str	r3, [r6, #0]
 8002eea:	4630      	mov	r0, r6
 8002eec:	f000 f80c 	bl	8002f08 <__malloc_unlock>
 8002ef0:	e794      	b.n	8002e1c <_malloc_r+0x20>
 8002ef2:	6005      	str	r5, [r0, #0]
 8002ef4:	e7d6      	b.n	8002ea4 <_malloc_r+0xa8>
 8002ef6:	bf00      	nop
 8002ef8:	2000023c 	.word	0x2000023c

08002efc <__malloc_lock>:
 8002efc:	4801      	ldr	r0, [pc, #4]	@ (8002f04 <__malloc_lock+0x8>)
 8002efe:	f7ff bf0e 	b.w	8002d1e <__retarget_lock_acquire_recursive>
 8002f02:	bf00      	nop
 8002f04:	20000234 	.word	0x20000234

08002f08 <__malloc_unlock>:
 8002f08:	4801      	ldr	r0, [pc, #4]	@ (8002f10 <__malloc_unlock+0x8>)
 8002f0a:	f7ff bf09 	b.w	8002d20 <__retarget_lock_release_recursive>
 8002f0e:	bf00      	nop
 8002f10:	20000234 	.word	0x20000234

08002f14 <__sfputc_r>:
 8002f14:	6893      	ldr	r3, [r2, #8]
 8002f16:	3b01      	subs	r3, #1
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	b410      	push	{r4}
 8002f1c:	6093      	str	r3, [r2, #8]
 8002f1e:	da08      	bge.n	8002f32 <__sfputc_r+0x1e>
 8002f20:	6994      	ldr	r4, [r2, #24]
 8002f22:	42a3      	cmp	r3, r4
 8002f24:	db01      	blt.n	8002f2a <__sfputc_r+0x16>
 8002f26:	290a      	cmp	r1, #10
 8002f28:	d103      	bne.n	8002f32 <__sfputc_r+0x1e>
 8002f2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002f2e:	f000 bb6d 	b.w	800360c <__swbuf_r>
 8002f32:	6813      	ldr	r3, [r2, #0]
 8002f34:	1c58      	adds	r0, r3, #1
 8002f36:	6010      	str	r0, [r2, #0]
 8002f38:	7019      	strb	r1, [r3, #0]
 8002f3a:	4608      	mov	r0, r1
 8002f3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002f40:	4770      	bx	lr

08002f42 <__sfputs_r>:
 8002f42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f44:	4606      	mov	r6, r0
 8002f46:	460f      	mov	r7, r1
 8002f48:	4614      	mov	r4, r2
 8002f4a:	18d5      	adds	r5, r2, r3
 8002f4c:	42ac      	cmp	r4, r5
 8002f4e:	d101      	bne.n	8002f54 <__sfputs_r+0x12>
 8002f50:	2000      	movs	r0, #0
 8002f52:	e007      	b.n	8002f64 <__sfputs_r+0x22>
 8002f54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f58:	463a      	mov	r2, r7
 8002f5a:	4630      	mov	r0, r6
 8002f5c:	f7ff ffda 	bl	8002f14 <__sfputc_r>
 8002f60:	1c43      	adds	r3, r0, #1
 8002f62:	d1f3      	bne.n	8002f4c <__sfputs_r+0xa>
 8002f64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002f68 <_vfiprintf_r>:
 8002f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f6c:	460d      	mov	r5, r1
 8002f6e:	b09d      	sub	sp, #116	@ 0x74
 8002f70:	4614      	mov	r4, r2
 8002f72:	4698      	mov	r8, r3
 8002f74:	4606      	mov	r6, r0
 8002f76:	b118      	cbz	r0, 8002f80 <_vfiprintf_r+0x18>
 8002f78:	6a03      	ldr	r3, [r0, #32]
 8002f7a:	b90b      	cbnz	r3, 8002f80 <_vfiprintf_r+0x18>
 8002f7c:	f7ff fdca 	bl	8002b14 <__sinit>
 8002f80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002f82:	07d9      	lsls	r1, r3, #31
 8002f84:	d405      	bmi.n	8002f92 <_vfiprintf_r+0x2a>
 8002f86:	89ab      	ldrh	r3, [r5, #12]
 8002f88:	059a      	lsls	r2, r3, #22
 8002f8a:	d402      	bmi.n	8002f92 <_vfiprintf_r+0x2a>
 8002f8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002f8e:	f7ff fec6 	bl	8002d1e <__retarget_lock_acquire_recursive>
 8002f92:	89ab      	ldrh	r3, [r5, #12]
 8002f94:	071b      	lsls	r3, r3, #28
 8002f96:	d501      	bpl.n	8002f9c <_vfiprintf_r+0x34>
 8002f98:	692b      	ldr	r3, [r5, #16]
 8002f9a:	b99b      	cbnz	r3, 8002fc4 <_vfiprintf_r+0x5c>
 8002f9c:	4629      	mov	r1, r5
 8002f9e:	4630      	mov	r0, r6
 8002fa0:	f000 fb72 	bl	8003688 <__swsetup_r>
 8002fa4:	b170      	cbz	r0, 8002fc4 <_vfiprintf_r+0x5c>
 8002fa6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002fa8:	07dc      	lsls	r4, r3, #31
 8002faa:	d504      	bpl.n	8002fb6 <_vfiprintf_r+0x4e>
 8002fac:	f04f 30ff 	mov.w	r0, #4294967295
 8002fb0:	b01d      	add	sp, #116	@ 0x74
 8002fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fb6:	89ab      	ldrh	r3, [r5, #12]
 8002fb8:	0598      	lsls	r0, r3, #22
 8002fba:	d4f7      	bmi.n	8002fac <_vfiprintf_r+0x44>
 8002fbc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002fbe:	f7ff feaf 	bl	8002d20 <__retarget_lock_release_recursive>
 8002fc2:	e7f3      	b.n	8002fac <_vfiprintf_r+0x44>
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	9309      	str	r3, [sp, #36]	@ 0x24
 8002fc8:	2320      	movs	r3, #32
 8002fca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002fce:	f8cd 800c 	str.w	r8, [sp, #12]
 8002fd2:	2330      	movs	r3, #48	@ 0x30
 8002fd4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003184 <_vfiprintf_r+0x21c>
 8002fd8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002fdc:	f04f 0901 	mov.w	r9, #1
 8002fe0:	4623      	mov	r3, r4
 8002fe2:	469a      	mov	sl, r3
 8002fe4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002fe8:	b10a      	cbz	r2, 8002fee <_vfiprintf_r+0x86>
 8002fea:	2a25      	cmp	r2, #37	@ 0x25
 8002fec:	d1f9      	bne.n	8002fe2 <_vfiprintf_r+0x7a>
 8002fee:	ebba 0b04 	subs.w	fp, sl, r4
 8002ff2:	d00b      	beq.n	800300c <_vfiprintf_r+0xa4>
 8002ff4:	465b      	mov	r3, fp
 8002ff6:	4622      	mov	r2, r4
 8002ff8:	4629      	mov	r1, r5
 8002ffa:	4630      	mov	r0, r6
 8002ffc:	f7ff ffa1 	bl	8002f42 <__sfputs_r>
 8003000:	3001      	adds	r0, #1
 8003002:	f000 80a7 	beq.w	8003154 <_vfiprintf_r+0x1ec>
 8003006:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003008:	445a      	add	r2, fp
 800300a:	9209      	str	r2, [sp, #36]	@ 0x24
 800300c:	f89a 3000 	ldrb.w	r3, [sl]
 8003010:	2b00      	cmp	r3, #0
 8003012:	f000 809f 	beq.w	8003154 <_vfiprintf_r+0x1ec>
 8003016:	2300      	movs	r3, #0
 8003018:	f04f 32ff 	mov.w	r2, #4294967295
 800301c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003020:	f10a 0a01 	add.w	sl, sl, #1
 8003024:	9304      	str	r3, [sp, #16]
 8003026:	9307      	str	r3, [sp, #28]
 8003028:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800302c:	931a      	str	r3, [sp, #104]	@ 0x68
 800302e:	4654      	mov	r4, sl
 8003030:	2205      	movs	r2, #5
 8003032:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003036:	4853      	ldr	r0, [pc, #332]	@ (8003184 <_vfiprintf_r+0x21c>)
 8003038:	f7fd f8d2 	bl	80001e0 <memchr>
 800303c:	9a04      	ldr	r2, [sp, #16]
 800303e:	b9d8      	cbnz	r0, 8003078 <_vfiprintf_r+0x110>
 8003040:	06d1      	lsls	r1, r2, #27
 8003042:	bf44      	itt	mi
 8003044:	2320      	movmi	r3, #32
 8003046:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800304a:	0713      	lsls	r3, r2, #28
 800304c:	bf44      	itt	mi
 800304e:	232b      	movmi	r3, #43	@ 0x2b
 8003050:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003054:	f89a 3000 	ldrb.w	r3, [sl]
 8003058:	2b2a      	cmp	r3, #42	@ 0x2a
 800305a:	d015      	beq.n	8003088 <_vfiprintf_r+0x120>
 800305c:	9a07      	ldr	r2, [sp, #28]
 800305e:	4654      	mov	r4, sl
 8003060:	2000      	movs	r0, #0
 8003062:	f04f 0c0a 	mov.w	ip, #10
 8003066:	4621      	mov	r1, r4
 8003068:	f811 3b01 	ldrb.w	r3, [r1], #1
 800306c:	3b30      	subs	r3, #48	@ 0x30
 800306e:	2b09      	cmp	r3, #9
 8003070:	d94b      	bls.n	800310a <_vfiprintf_r+0x1a2>
 8003072:	b1b0      	cbz	r0, 80030a2 <_vfiprintf_r+0x13a>
 8003074:	9207      	str	r2, [sp, #28]
 8003076:	e014      	b.n	80030a2 <_vfiprintf_r+0x13a>
 8003078:	eba0 0308 	sub.w	r3, r0, r8
 800307c:	fa09 f303 	lsl.w	r3, r9, r3
 8003080:	4313      	orrs	r3, r2
 8003082:	9304      	str	r3, [sp, #16]
 8003084:	46a2      	mov	sl, r4
 8003086:	e7d2      	b.n	800302e <_vfiprintf_r+0xc6>
 8003088:	9b03      	ldr	r3, [sp, #12]
 800308a:	1d19      	adds	r1, r3, #4
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	9103      	str	r1, [sp, #12]
 8003090:	2b00      	cmp	r3, #0
 8003092:	bfbb      	ittet	lt
 8003094:	425b      	neglt	r3, r3
 8003096:	f042 0202 	orrlt.w	r2, r2, #2
 800309a:	9307      	strge	r3, [sp, #28]
 800309c:	9307      	strlt	r3, [sp, #28]
 800309e:	bfb8      	it	lt
 80030a0:	9204      	strlt	r2, [sp, #16]
 80030a2:	7823      	ldrb	r3, [r4, #0]
 80030a4:	2b2e      	cmp	r3, #46	@ 0x2e
 80030a6:	d10a      	bne.n	80030be <_vfiprintf_r+0x156>
 80030a8:	7863      	ldrb	r3, [r4, #1]
 80030aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80030ac:	d132      	bne.n	8003114 <_vfiprintf_r+0x1ac>
 80030ae:	9b03      	ldr	r3, [sp, #12]
 80030b0:	1d1a      	adds	r2, r3, #4
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	9203      	str	r2, [sp, #12]
 80030b6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80030ba:	3402      	adds	r4, #2
 80030bc:	9305      	str	r3, [sp, #20]
 80030be:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003194 <_vfiprintf_r+0x22c>
 80030c2:	7821      	ldrb	r1, [r4, #0]
 80030c4:	2203      	movs	r2, #3
 80030c6:	4650      	mov	r0, sl
 80030c8:	f7fd f88a 	bl	80001e0 <memchr>
 80030cc:	b138      	cbz	r0, 80030de <_vfiprintf_r+0x176>
 80030ce:	9b04      	ldr	r3, [sp, #16]
 80030d0:	eba0 000a 	sub.w	r0, r0, sl
 80030d4:	2240      	movs	r2, #64	@ 0x40
 80030d6:	4082      	lsls	r2, r0
 80030d8:	4313      	orrs	r3, r2
 80030da:	3401      	adds	r4, #1
 80030dc:	9304      	str	r3, [sp, #16]
 80030de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80030e2:	4829      	ldr	r0, [pc, #164]	@ (8003188 <_vfiprintf_r+0x220>)
 80030e4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80030e8:	2206      	movs	r2, #6
 80030ea:	f7fd f879 	bl	80001e0 <memchr>
 80030ee:	2800      	cmp	r0, #0
 80030f0:	d03f      	beq.n	8003172 <_vfiprintf_r+0x20a>
 80030f2:	4b26      	ldr	r3, [pc, #152]	@ (800318c <_vfiprintf_r+0x224>)
 80030f4:	bb1b      	cbnz	r3, 800313e <_vfiprintf_r+0x1d6>
 80030f6:	9b03      	ldr	r3, [sp, #12]
 80030f8:	3307      	adds	r3, #7
 80030fa:	f023 0307 	bic.w	r3, r3, #7
 80030fe:	3308      	adds	r3, #8
 8003100:	9303      	str	r3, [sp, #12]
 8003102:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003104:	443b      	add	r3, r7
 8003106:	9309      	str	r3, [sp, #36]	@ 0x24
 8003108:	e76a      	b.n	8002fe0 <_vfiprintf_r+0x78>
 800310a:	fb0c 3202 	mla	r2, ip, r2, r3
 800310e:	460c      	mov	r4, r1
 8003110:	2001      	movs	r0, #1
 8003112:	e7a8      	b.n	8003066 <_vfiprintf_r+0xfe>
 8003114:	2300      	movs	r3, #0
 8003116:	3401      	adds	r4, #1
 8003118:	9305      	str	r3, [sp, #20]
 800311a:	4619      	mov	r1, r3
 800311c:	f04f 0c0a 	mov.w	ip, #10
 8003120:	4620      	mov	r0, r4
 8003122:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003126:	3a30      	subs	r2, #48	@ 0x30
 8003128:	2a09      	cmp	r2, #9
 800312a:	d903      	bls.n	8003134 <_vfiprintf_r+0x1cc>
 800312c:	2b00      	cmp	r3, #0
 800312e:	d0c6      	beq.n	80030be <_vfiprintf_r+0x156>
 8003130:	9105      	str	r1, [sp, #20]
 8003132:	e7c4      	b.n	80030be <_vfiprintf_r+0x156>
 8003134:	fb0c 2101 	mla	r1, ip, r1, r2
 8003138:	4604      	mov	r4, r0
 800313a:	2301      	movs	r3, #1
 800313c:	e7f0      	b.n	8003120 <_vfiprintf_r+0x1b8>
 800313e:	ab03      	add	r3, sp, #12
 8003140:	9300      	str	r3, [sp, #0]
 8003142:	462a      	mov	r2, r5
 8003144:	4b12      	ldr	r3, [pc, #72]	@ (8003190 <_vfiprintf_r+0x228>)
 8003146:	a904      	add	r1, sp, #16
 8003148:	4630      	mov	r0, r6
 800314a:	f3af 8000 	nop.w
 800314e:	4607      	mov	r7, r0
 8003150:	1c78      	adds	r0, r7, #1
 8003152:	d1d6      	bne.n	8003102 <_vfiprintf_r+0x19a>
 8003154:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003156:	07d9      	lsls	r1, r3, #31
 8003158:	d405      	bmi.n	8003166 <_vfiprintf_r+0x1fe>
 800315a:	89ab      	ldrh	r3, [r5, #12]
 800315c:	059a      	lsls	r2, r3, #22
 800315e:	d402      	bmi.n	8003166 <_vfiprintf_r+0x1fe>
 8003160:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003162:	f7ff fddd 	bl	8002d20 <__retarget_lock_release_recursive>
 8003166:	89ab      	ldrh	r3, [r5, #12]
 8003168:	065b      	lsls	r3, r3, #25
 800316a:	f53f af1f 	bmi.w	8002fac <_vfiprintf_r+0x44>
 800316e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003170:	e71e      	b.n	8002fb0 <_vfiprintf_r+0x48>
 8003172:	ab03      	add	r3, sp, #12
 8003174:	9300      	str	r3, [sp, #0]
 8003176:	462a      	mov	r2, r5
 8003178:	4b05      	ldr	r3, [pc, #20]	@ (8003190 <_vfiprintf_r+0x228>)
 800317a:	a904      	add	r1, sp, #16
 800317c:	4630      	mov	r0, r6
 800317e:	f000 f879 	bl	8003274 <_printf_i>
 8003182:	e7e4      	b.n	800314e <_vfiprintf_r+0x1e6>
 8003184:	080038c4 	.word	0x080038c4
 8003188:	080038ce 	.word	0x080038ce
 800318c:	00000000 	.word	0x00000000
 8003190:	08002f43 	.word	0x08002f43
 8003194:	080038ca 	.word	0x080038ca

08003198 <_printf_common>:
 8003198:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800319c:	4616      	mov	r6, r2
 800319e:	4698      	mov	r8, r3
 80031a0:	688a      	ldr	r2, [r1, #8]
 80031a2:	690b      	ldr	r3, [r1, #16]
 80031a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80031a8:	4293      	cmp	r3, r2
 80031aa:	bfb8      	it	lt
 80031ac:	4613      	movlt	r3, r2
 80031ae:	6033      	str	r3, [r6, #0]
 80031b0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80031b4:	4607      	mov	r7, r0
 80031b6:	460c      	mov	r4, r1
 80031b8:	b10a      	cbz	r2, 80031be <_printf_common+0x26>
 80031ba:	3301      	adds	r3, #1
 80031bc:	6033      	str	r3, [r6, #0]
 80031be:	6823      	ldr	r3, [r4, #0]
 80031c0:	0699      	lsls	r1, r3, #26
 80031c2:	bf42      	ittt	mi
 80031c4:	6833      	ldrmi	r3, [r6, #0]
 80031c6:	3302      	addmi	r3, #2
 80031c8:	6033      	strmi	r3, [r6, #0]
 80031ca:	6825      	ldr	r5, [r4, #0]
 80031cc:	f015 0506 	ands.w	r5, r5, #6
 80031d0:	d106      	bne.n	80031e0 <_printf_common+0x48>
 80031d2:	f104 0a19 	add.w	sl, r4, #25
 80031d6:	68e3      	ldr	r3, [r4, #12]
 80031d8:	6832      	ldr	r2, [r6, #0]
 80031da:	1a9b      	subs	r3, r3, r2
 80031dc:	42ab      	cmp	r3, r5
 80031de:	dc26      	bgt.n	800322e <_printf_common+0x96>
 80031e0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80031e4:	6822      	ldr	r2, [r4, #0]
 80031e6:	3b00      	subs	r3, #0
 80031e8:	bf18      	it	ne
 80031ea:	2301      	movne	r3, #1
 80031ec:	0692      	lsls	r2, r2, #26
 80031ee:	d42b      	bmi.n	8003248 <_printf_common+0xb0>
 80031f0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80031f4:	4641      	mov	r1, r8
 80031f6:	4638      	mov	r0, r7
 80031f8:	47c8      	blx	r9
 80031fa:	3001      	adds	r0, #1
 80031fc:	d01e      	beq.n	800323c <_printf_common+0xa4>
 80031fe:	6823      	ldr	r3, [r4, #0]
 8003200:	6922      	ldr	r2, [r4, #16]
 8003202:	f003 0306 	and.w	r3, r3, #6
 8003206:	2b04      	cmp	r3, #4
 8003208:	bf02      	ittt	eq
 800320a:	68e5      	ldreq	r5, [r4, #12]
 800320c:	6833      	ldreq	r3, [r6, #0]
 800320e:	1aed      	subeq	r5, r5, r3
 8003210:	68a3      	ldr	r3, [r4, #8]
 8003212:	bf0c      	ite	eq
 8003214:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003218:	2500      	movne	r5, #0
 800321a:	4293      	cmp	r3, r2
 800321c:	bfc4      	itt	gt
 800321e:	1a9b      	subgt	r3, r3, r2
 8003220:	18ed      	addgt	r5, r5, r3
 8003222:	2600      	movs	r6, #0
 8003224:	341a      	adds	r4, #26
 8003226:	42b5      	cmp	r5, r6
 8003228:	d11a      	bne.n	8003260 <_printf_common+0xc8>
 800322a:	2000      	movs	r0, #0
 800322c:	e008      	b.n	8003240 <_printf_common+0xa8>
 800322e:	2301      	movs	r3, #1
 8003230:	4652      	mov	r2, sl
 8003232:	4641      	mov	r1, r8
 8003234:	4638      	mov	r0, r7
 8003236:	47c8      	blx	r9
 8003238:	3001      	adds	r0, #1
 800323a:	d103      	bne.n	8003244 <_printf_common+0xac>
 800323c:	f04f 30ff 	mov.w	r0, #4294967295
 8003240:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003244:	3501      	adds	r5, #1
 8003246:	e7c6      	b.n	80031d6 <_printf_common+0x3e>
 8003248:	18e1      	adds	r1, r4, r3
 800324a:	1c5a      	adds	r2, r3, #1
 800324c:	2030      	movs	r0, #48	@ 0x30
 800324e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003252:	4422      	add	r2, r4
 8003254:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003258:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800325c:	3302      	adds	r3, #2
 800325e:	e7c7      	b.n	80031f0 <_printf_common+0x58>
 8003260:	2301      	movs	r3, #1
 8003262:	4622      	mov	r2, r4
 8003264:	4641      	mov	r1, r8
 8003266:	4638      	mov	r0, r7
 8003268:	47c8      	blx	r9
 800326a:	3001      	adds	r0, #1
 800326c:	d0e6      	beq.n	800323c <_printf_common+0xa4>
 800326e:	3601      	adds	r6, #1
 8003270:	e7d9      	b.n	8003226 <_printf_common+0x8e>
	...

08003274 <_printf_i>:
 8003274:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003278:	7e0f      	ldrb	r7, [r1, #24]
 800327a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800327c:	2f78      	cmp	r7, #120	@ 0x78
 800327e:	4691      	mov	r9, r2
 8003280:	4680      	mov	r8, r0
 8003282:	460c      	mov	r4, r1
 8003284:	469a      	mov	sl, r3
 8003286:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800328a:	d807      	bhi.n	800329c <_printf_i+0x28>
 800328c:	2f62      	cmp	r7, #98	@ 0x62
 800328e:	d80a      	bhi.n	80032a6 <_printf_i+0x32>
 8003290:	2f00      	cmp	r7, #0
 8003292:	f000 80d2 	beq.w	800343a <_printf_i+0x1c6>
 8003296:	2f58      	cmp	r7, #88	@ 0x58
 8003298:	f000 80b9 	beq.w	800340e <_printf_i+0x19a>
 800329c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80032a0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80032a4:	e03a      	b.n	800331c <_printf_i+0xa8>
 80032a6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80032aa:	2b15      	cmp	r3, #21
 80032ac:	d8f6      	bhi.n	800329c <_printf_i+0x28>
 80032ae:	a101      	add	r1, pc, #4	@ (adr r1, 80032b4 <_printf_i+0x40>)
 80032b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80032b4:	0800330d 	.word	0x0800330d
 80032b8:	08003321 	.word	0x08003321
 80032bc:	0800329d 	.word	0x0800329d
 80032c0:	0800329d 	.word	0x0800329d
 80032c4:	0800329d 	.word	0x0800329d
 80032c8:	0800329d 	.word	0x0800329d
 80032cc:	08003321 	.word	0x08003321
 80032d0:	0800329d 	.word	0x0800329d
 80032d4:	0800329d 	.word	0x0800329d
 80032d8:	0800329d 	.word	0x0800329d
 80032dc:	0800329d 	.word	0x0800329d
 80032e0:	08003421 	.word	0x08003421
 80032e4:	0800334b 	.word	0x0800334b
 80032e8:	080033db 	.word	0x080033db
 80032ec:	0800329d 	.word	0x0800329d
 80032f0:	0800329d 	.word	0x0800329d
 80032f4:	08003443 	.word	0x08003443
 80032f8:	0800329d 	.word	0x0800329d
 80032fc:	0800334b 	.word	0x0800334b
 8003300:	0800329d 	.word	0x0800329d
 8003304:	0800329d 	.word	0x0800329d
 8003308:	080033e3 	.word	0x080033e3
 800330c:	6833      	ldr	r3, [r6, #0]
 800330e:	1d1a      	adds	r2, r3, #4
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	6032      	str	r2, [r6, #0]
 8003314:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003318:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800331c:	2301      	movs	r3, #1
 800331e:	e09d      	b.n	800345c <_printf_i+0x1e8>
 8003320:	6833      	ldr	r3, [r6, #0]
 8003322:	6820      	ldr	r0, [r4, #0]
 8003324:	1d19      	adds	r1, r3, #4
 8003326:	6031      	str	r1, [r6, #0]
 8003328:	0606      	lsls	r6, r0, #24
 800332a:	d501      	bpl.n	8003330 <_printf_i+0xbc>
 800332c:	681d      	ldr	r5, [r3, #0]
 800332e:	e003      	b.n	8003338 <_printf_i+0xc4>
 8003330:	0645      	lsls	r5, r0, #25
 8003332:	d5fb      	bpl.n	800332c <_printf_i+0xb8>
 8003334:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003338:	2d00      	cmp	r5, #0
 800333a:	da03      	bge.n	8003344 <_printf_i+0xd0>
 800333c:	232d      	movs	r3, #45	@ 0x2d
 800333e:	426d      	negs	r5, r5
 8003340:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003344:	4859      	ldr	r0, [pc, #356]	@ (80034ac <_printf_i+0x238>)
 8003346:	230a      	movs	r3, #10
 8003348:	e011      	b.n	800336e <_printf_i+0xfa>
 800334a:	6821      	ldr	r1, [r4, #0]
 800334c:	6833      	ldr	r3, [r6, #0]
 800334e:	0608      	lsls	r0, r1, #24
 8003350:	f853 5b04 	ldr.w	r5, [r3], #4
 8003354:	d402      	bmi.n	800335c <_printf_i+0xe8>
 8003356:	0649      	lsls	r1, r1, #25
 8003358:	bf48      	it	mi
 800335a:	b2ad      	uxthmi	r5, r5
 800335c:	2f6f      	cmp	r7, #111	@ 0x6f
 800335e:	4853      	ldr	r0, [pc, #332]	@ (80034ac <_printf_i+0x238>)
 8003360:	6033      	str	r3, [r6, #0]
 8003362:	bf14      	ite	ne
 8003364:	230a      	movne	r3, #10
 8003366:	2308      	moveq	r3, #8
 8003368:	2100      	movs	r1, #0
 800336a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800336e:	6866      	ldr	r6, [r4, #4]
 8003370:	60a6      	str	r6, [r4, #8]
 8003372:	2e00      	cmp	r6, #0
 8003374:	bfa2      	ittt	ge
 8003376:	6821      	ldrge	r1, [r4, #0]
 8003378:	f021 0104 	bicge.w	r1, r1, #4
 800337c:	6021      	strge	r1, [r4, #0]
 800337e:	b90d      	cbnz	r5, 8003384 <_printf_i+0x110>
 8003380:	2e00      	cmp	r6, #0
 8003382:	d04b      	beq.n	800341c <_printf_i+0x1a8>
 8003384:	4616      	mov	r6, r2
 8003386:	fbb5 f1f3 	udiv	r1, r5, r3
 800338a:	fb03 5711 	mls	r7, r3, r1, r5
 800338e:	5dc7      	ldrb	r7, [r0, r7]
 8003390:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003394:	462f      	mov	r7, r5
 8003396:	42bb      	cmp	r3, r7
 8003398:	460d      	mov	r5, r1
 800339a:	d9f4      	bls.n	8003386 <_printf_i+0x112>
 800339c:	2b08      	cmp	r3, #8
 800339e:	d10b      	bne.n	80033b8 <_printf_i+0x144>
 80033a0:	6823      	ldr	r3, [r4, #0]
 80033a2:	07df      	lsls	r7, r3, #31
 80033a4:	d508      	bpl.n	80033b8 <_printf_i+0x144>
 80033a6:	6923      	ldr	r3, [r4, #16]
 80033a8:	6861      	ldr	r1, [r4, #4]
 80033aa:	4299      	cmp	r1, r3
 80033ac:	bfde      	ittt	le
 80033ae:	2330      	movle	r3, #48	@ 0x30
 80033b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80033b4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80033b8:	1b92      	subs	r2, r2, r6
 80033ba:	6122      	str	r2, [r4, #16]
 80033bc:	f8cd a000 	str.w	sl, [sp]
 80033c0:	464b      	mov	r3, r9
 80033c2:	aa03      	add	r2, sp, #12
 80033c4:	4621      	mov	r1, r4
 80033c6:	4640      	mov	r0, r8
 80033c8:	f7ff fee6 	bl	8003198 <_printf_common>
 80033cc:	3001      	adds	r0, #1
 80033ce:	d14a      	bne.n	8003466 <_printf_i+0x1f2>
 80033d0:	f04f 30ff 	mov.w	r0, #4294967295
 80033d4:	b004      	add	sp, #16
 80033d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033da:	6823      	ldr	r3, [r4, #0]
 80033dc:	f043 0320 	orr.w	r3, r3, #32
 80033e0:	6023      	str	r3, [r4, #0]
 80033e2:	4833      	ldr	r0, [pc, #204]	@ (80034b0 <_printf_i+0x23c>)
 80033e4:	2778      	movs	r7, #120	@ 0x78
 80033e6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80033ea:	6823      	ldr	r3, [r4, #0]
 80033ec:	6831      	ldr	r1, [r6, #0]
 80033ee:	061f      	lsls	r7, r3, #24
 80033f0:	f851 5b04 	ldr.w	r5, [r1], #4
 80033f4:	d402      	bmi.n	80033fc <_printf_i+0x188>
 80033f6:	065f      	lsls	r7, r3, #25
 80033f8:	bf48      	it	mi
 80033fa:	b2ad      	uxthmi	r5, r5
 80033fc:	6031      	str	r1, [r6, #0]
 80033fe:	07d9      	lsls	r1, r3, #31
 8003400:	bf44      	itt	mi
 8003402:	f043 0320 	orrmi.w	r3, r3, #32
 8003406:	6023      	strmi	r3, [r4, #0]
 8003408:	b11d      	cbz	r5, 8003412 <_printf_i+0x19e>
 800340a:	2310      	movs	r3, #16
 800340c:	e7ac      	b.n	8003368 <_printf_i+0xf4>
 800340e:	4827      	ldr	r0, [pc, #156]	@ (80034ac <_printf_i+0x238>)
 8003410:	e7e9      	b.n	80033e6 <_printf_i+0x172>
 8003412:	6823      	ldr	r3, [r4, #0]
 8003414:	f023 0320 	bic.w	r3, r3, #32
 8003418:	6023      	str	r3, [r4, #0]
 800341a:	e7f6      	b.n	800340a <_printf_i+0x196>
 800341c:	4616      	mov	r6, r2
 800341e:	e7bd      	b.n	800339c <_printf_i+0x128>
 8003420:	6833      	ldr	r3, [r6, #0]
 8003422:	6825      	ldr	r5, [r4, #0]
 8003424:	6961      	ldr	r1, [r4, #20]
 8003426:	1d18      	adds	r0, r3, #4
 8003428:	6030      	str	r0, [r6, #0]
 800342a:	062e      	lsls	r6, r5, #24
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	d501      	bpl.n	8003434 <_printf_i+0x1c0>
 8003430:	6019      	str	r1, [r3, #0]
 8003432:	e002      	b.n	800343a <_printf_i+0x1c6>
 8003434:	0668      	lsls	r0, r5, #25
 8003436:	d5fb      	bpl.n	8003430 <_printf_i+0x1bc>
 8003438:	8019      	strh	r1, [r3, #0]
 800343a:	2300      	movs	r3, #0
 800343c:	6123      	str	r3, [r4, #16]
 800343e:	4616      	mov	r6, r2
 8003440:	e7bc      	b.n	80033bc <_printf_i+0x148>
 8003442:	6833      	ldr	r3, [r6, #0]
 8003444:	1d1a      	adds	r2, r3, #4
 8003446:	6032      	str	r2, [r6, #0]
 8003448:	681e      	ldr	r6, [r3, #0]
 800344a:	6862      	ldr	r2, [r4, #4]
 800344c:	2100      	movs	r1, #0
 800344e:	4630      	mov	r0, r6
 8003450:	f7fc fec6 	bl	80001e0 <memchr>
 8003454:	b108      	cbz	r0, 800345a <_printf_i+0x1e6>
 8003456:	1b80      	subs	r0, r0, r6
 8003458:	6060      	str	r0, [r4, #4]
 800345a:	6863      	ldr	r3, [r4, #4]
 800345c:	6123      	str	r3, [r4, #16]
 800345e:	2300      	movs	r3, #0
 8003460:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003464:	e7aa      	b.n	80033bc <_printf_i+0x148>
 8003466:	6923      	ldr	r3, [r4, #16]
 8003468:	4632      	mov	r2, r6
 800346a:	4649      	mov	r1, r9
 800346c:	4640      	mov	r0, r8
 800346e:	47d0      	blx	sl
 8003470:	3001      	adds	r0, #1
 8003472:	d0ad      	beq.n	80033d0 <_printf_i+0x15c>
 8003474:	6823      	ldr	r3, [r4, #0]
 8003476:	079b      	lsls	r3, r3, #30
 8003478:	d413      	bmi.n	80034a2 <_printf_i+0x22e>
 800347a:	68e0      	ldr	r0, [r4, #12]
 800347c:	9b03      	ldr	r3, [sp, #12]
 800347e:	4298      	cmp	r0, r3
 8003480:	bfb8      	it	lt
 8003482:	4618      	movlt	r0, r3
 8003484:	e7a6      	b.n	80033d4 <_printf_i+0x160>
 8003486:	2301      	movs	r3, #1
 8003488:	4632      	mov	r2, r6
 800348a:	4649      	mov	r1, r9
 800348c:	4640      	mov	r0, r8
 800348e:	47d0      	blx	sl
 8003490:	3001      	adds	r0, #1
 8003492:	d09d      	beq.n	80033d0 <_printf_i+0x15c>
 8003494:	3501      	adds	r5, #1
 8003496:	68e3      	ldr	r3, [r4, #12]
 8003498:	9903      	ldr	r1, [sp, #12]
 800349a:	1a5b      	subs	r3, r3, r1
 800349c:	42ab      	cmp	r3, r5
 800349e:	dcf2      	bgt.n	8003486 <_printf_i+0x212>
 80034a0:	e7eb      	b.n	800347a <_printf_i+0x206>
 80034a2:	2500      	movs	r5, #0
 80034a4:	f104 0619 	add.w	r6, r4, #25
 80034a8:	e7f5      	b.n	8003496 <_printf_i+0x222>
 80034aa:	bf00      	nop
 80034ac:	080038d5 	.word	0x080038d5
 80034b0:	080038e6 	.word	0x080038e6

080034b4 <__sflush_r>:
 80034b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80034b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034bc:	0716      	lsls	r6, r2, #28
 80034be:	4605      	mov	r5, r0
 80034c0:	460c      	mov	r4, r1
 80034c2:	d454      	bmi.n	800356e <__sflush_r+0xba>
 80034c4:	684b      	ldr	r3, [r1, #4]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	dc02      	bgt.n	80034d0 <__sflush_r+0x1c>
 80034ca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	dd48      	ble.n	8003562 <__sflush_r+0xae>
 80034d0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80034d2:	2e00      	cmp	r6, #0
 80034d4:	d045      	beq.n	8003562 <__sflush_r+0xae>
 80034d6:	2300      	movs	r3, #0
 80034d8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80034dc:	682f      	ldr	r7, [r5, #0]
 80034de:	6a21      	ldr	r1, [r4, #32]
 80034e0:	602b      	str	r3, [r5, #0]
 80034e2:	d030      	beq.n	8003546 <__sflush_r+0x92>
 80034e4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80034e6:	89a3      	ldrh	r3, [r4, #12]
 80034e8:	0759      	lsls	r1, r3, #29
 80034ea:	d505      	bpl.n	80034f8 <__sflush_r+0x44>
 80034ec:	6863      	ldr	r3, [r4, #4]
 80034ee:	1ad2      	subs	r2, r2, r3
 80034f0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80034f2:	b10b      	cbz	r3, 80034f8 <__sflush_r+0x44>
 80034f4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80034f6:	1ad2      	subs	r2, r2, r3
 80034f8:	2300      	movs	r3, #0
 80034fa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80034fc:	6a21      	ldr	r1, [r4, #32]
 80034fe:	4628      	mov	r0, r5
 8003500:	47b0      	blx	r6
 8003502:	1c43      	adds	r3, r0, #1
 8003504:	89a3      	ldrh	r3, [r4, #12]
 8003506:	d106      	bne.n	8003516 <__sflush_r+0x62>
 8003508:	6829      	ldr	r1, [r5, #0]
 800350a:	291d      	cmp	r1, #29
 800350c:	d82b      	bhi.n	8003566 <__sflush_r+0xb2>
 800350e:	4a2a      	ldr	r2, [pc, #168]	@ (80035b8 <__sflush_r+0x104>)
 8003510:	410a      	asrs	r2, r1
 8003512:	07d6      	lsls	r6, r2, #31
 8003514:	d427      	bmi.n	8003566 <__sflush_r+0xb2>
 8003516:	2200      	movs	r2, #0
 8003518:	6062      	str	r2, [r4, #4]
 800351a:	04d9      	lsls	r1, r3, #19
 800351c:	6922      	ldr	r2, [r4, #16]
 800351e:	6022      	str	r2, [r4, #0]
 8003520:	d504      	bpl.n	800352c <__sflush_r+0x78>
 8003522:	1c42      	adds	r2, r0, #1
 8003524:	d101      	bne.n	800352a <__sflush_r+0x76>
 8003526:	682b      	ldr	r3, [r5, #0]
 8003528:	b903      	cbnz	r3, 800352c <__sflush_r+0x78>
 800352a:	6560      	str	r0, [r4, #84]	@ 0x54
 800352c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800352e:	602f      	str	r7, [r5, #0]
 8003530:	b1b9      	cbz	r1, 8003562 <__sflush_r+0xae>
 8003532:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003536:	4299      	cmp	r1, r3
 8003538:	d002      	beq.n	8003540 <__sflush_r+0x8c>
 800353a:	4628      	mov	r0, r5
 800353c:	f7ff fbf2 	bl	8002d24 <_free_r>
 8003540:	2300      	movs	r3, #0
 8003542:	6363      	str	r3, [r4, #52]	@ 0x34
 8003544:	e00d      	b.n	8003562 <__sflush_r+0xae>
 8003546:	2301      	movs	r3, #1
 8003548:	4628      	mov	r0, r5
 800354a:	47b0      	blx	r6
 800354c:	4602      	mov	r2, r0
 800354e:	1c50      	adds	r0, r2, #1
 8003550:	d1c9      	bne.n	80034e6 <__sflush_r+0x32>
 8003552:	682b      	ldr	r3, [r5, #0]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d0c6      	beq.n	80034e6 <__sflush_r+0x32>
 8003558:	2b1d      	cmp	r3, #29
 800355a:	d001      	beq.n	8003560 <__sflush_r+0xac>
 800355c:	2b16      	cmp	r3, #22
 800355e:	d11e      	bne.n	800359e <__sflush_r+0xea>
 8003560:	602f      	str	r7, [r5, #0]
 8003562:	2000      	movs	r0, #0
 8003564:	e022      	b.n	80035ac <__sflush_r+0xf8>
 8003566:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800356a:	b21b      	sxth	r3, r3
 800356c:	e01b      	b.n	80035a6 <__sflush_r+0xf2>
 800356e:	690f      	ldr	r7, [r1, #16]
 8003570:	2f00      	cmp	r7, #0
 8003572:	d0f6      	beq.n	8003562 <__sflush_r+0xae>
 8003574:	0793      	lsls	r3, r2, #30
 8003576:	680e      	ldr	r6, [r1, #0]
 8003578:	bf08      	it	eq
 800357a:	694b      	ldreq	r3, [r1, #20]
 800357c:	600f      	str	r7, [r1, #0]
 800357e:	bf18      	it	ne
 8003580:	2300      	movne	r3, #0
 8003582:	eba6 0807 	sub.w	r8, r6, r7
 8003586:	608b      	str	r3, [r1, #8]
 8003588:	f1b8 0f00 	cmp.w	r8, #0
 800358c:	dde9      	ble.n	8003562 <__sflush_r+0xae>
 800358e:	6a21      	ldr	r1, [r4, #32]
 8003590:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003592:	4643      	mov	r3, r8
 8003594:	463a      	mov	r2, r7
 8003596:	4628      	mov	r0, r5
 8003598:	47b0      	blx	r6
 800359a:	2800      	cmp	r0, #0
 800359c:	dc08      	bgt.n	80035b0 <__sflush_r+0xfc>
 800359e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80035a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80035a6:	81a3      	strh	r3, [r4, #12]
 80035a8:	f04f 30ff 	mov.w	r0, #4294967295
 80035ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80035b0:	4407      	add	r7, r0
 80035b2:	eba8 0800 	sub.w	r8, r8, r0
 80035b6:	e7e7      	b.n	8003588 <__sflush_r+0xd4>
 80035b8:	dfbffffe 	.word	0xdfbffffe

080035bc <_fflush_r>:
 80035bc:	b538      	push	{r3, r4, r5, lr}
 80035be:	690b      	ldr	r3, [r1, #16]
 80035c0:	4605      	mov	r5, r0
 80035c2:	460c      	mov	r4, r1
 80035c4:	b913      	cbnz	r3, 80035cc <_fflush_r+0x10>
 80035c6:	2500      	movs	r5, #0
 80035c8:	4628      	mov	r0, r5
 80035ca:	bd38      	pop	{r3, r4, r5, pc}
 80035cc:	b118      	cbz	r0, 80035d6 <_fflush_r+0x1a>
 80035ce:	6a03      	ldr	r3, [r0, #32]
 80035d0:	b90b      	cbnz	r3, 80035d6 <_fflush_r+0x1a>
 80035d2:	f7ff fa9f 	bl	8002b14 <__sinit>
 80035d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d0f3      	beq.n	80035c6 <_fflush_r+0xa>
 80035de:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80035e0:	07d0      	lsls	r0, r2, #31
 80035e2:	d404      	bmi.n	80035ee <_fflush_r+0x32>
 80035e4:	0599      	lsls	r1, r3, #22
 80035e6:	d402      	bmi.n	80035ee <_fflush_r+0x32>
 80035e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80035ea:	f7ff fb98 	bl	8002d1e <__retarget_lock_acquire_recursive>
 80035ee:	4628      	mov	r0, r5
 80035f0:	4621      	mov	r1, r4
 80035f2:	f7ff ff5f 	bl	80034b4 <__sflush_r>
 80035f6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80035f8:	07da      	lsls	r2, r3, #31
 80035fa:	4605      	mov	r5, r0
 80035fc:	d4e4      	bmi.n	80035c8 <_fflush_r+0xc>
 80035fe:	89a3      	ldrh	r3, [r4, #12]
 8003600:	059b      	lsls	r3, r3, #22
 8003602:	d4e1      	bmi.n	80035c8 <_fflush_r+0xc>
 8003604:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003606:	f7ff fb8b 	bl	8002d20 <__retarget_lock_release_recursive>
 800360a:	e7dd      	b.n	80035c8 <_fflush_r+0xc>

0800360c <__swbuf_r>:
 800360c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800360e:	460e      	mov	r6, r1
 8003610:	4614      	mov	r4, r2
 8003612:	4605      	mov	r5, r0
 8003614:	b118      	cbz	r0, 800361e <__swbuf_r+0x12>
 8003616:	6a03      	ldr	r3, [r0, #32]
 8003618:	b90b      	cbnz	r3, 800361e <__swbuf_r+0x12>
 800361a:	f7ff fa7b 	bl	8002b14 <__sinit>
 800361e:	69a3      	ldr	r3, [r4, #24]
 8003620:	60a3      	str	r3, [r4, #8]
 8003622:	89a3      	ldrh	r3, [r4, #12]
 8003624:	071a      	lsls	r2, r3, #28
 8003626:	d501      	bpl.n	800362c <__swbuf_r+0x20>
 8003628:	6923      	ldr	r3, [r4, #16]
 800362a:	b943      	cbnz	r3, 800363e <__swbuf_r+0x32>
 800362c:	4621      	mov	r1, r4
 800362e:	4628      	mov	r0, r5
 8003630:	f000 f82a 	bl	8003688 <__swsetup_r>
 8003634:	b118      	cbz	r0, 800363e <__swbuf_r+0x32>
 8003636:	f04f 37ff 	mov.w	r7, #4294967295
 800363a:	4638      	mov	r0, r7
 800363c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800363e:	6823      	ldr	r3, [r4, #0]
 8003640:	6922      	ldr	r2, [r4, #16]
 8003642:	1a98      	subs	r0, r3, r2
 8003644:	6963      	ldr	r3, [r4, #20]
 8003646:	b2f6      	uxtb	r6, r6
 8003648:	4283      	cmp	r3, r0
 800364a:	4637      	mov	r7, r6
 800364c:	dc05      	bgt.n	800365a <__swbuf_r+0x4e>
 800364e:	4621      	mov	r1, r4
 8003650:	4628      	mov	r0, r5
 8003652:	f7ff ffb3 	bl	80035bc <_fflush_r>
 8003656:	2800      	cmp	r0, #0
 8003658:	d1ed      	bne.n	8003636 <__swbuf_r+0x2a>
 800365a:	68a3      	ldr	r3, [r4, #8]
 800365c:	3b01      	subs	r3, #1
 800365e:	60a3      	str	r3, [r4, #8]
 8003660:	6823      	ldr	r3, [r4, #0]
 8003662:	1c5a      	adds	r2, r3, #1
 8003664:	6022      	str	r2, [r4, #0]
 8003666:	701e      	strb	r6, [r3, #0]
 8003668:	6962      	ldr	r2, [r4, #20]
 800366a:	1c43      	adds	r3, r0, #1
 800366c:	429a      	cmp	r2, r3
 800366e:	d004      	beq.n	800367a <__swbuf_r+0x6e>
 8003670:	89a3      	ldrh	r3, [r4, #12]
 8003672:	07db      	lsls	r3, r3, #31
 8003674:	d5e1      	bpl.n	800363a <__swbuf_r+0x2e>
 8003676:	2e0a      	cmp	r6, #10
 8003678:	d1df      	bne.n	800363a <__swbuf_r+0x2e>
 800367a:	4621      	mov	r1, r4
 800367c:	4628      	mov	r0, r5
 800367e:	f7ff ff9d 	bl	80035bc <_fflush_r>
 8003682:	2800      	cmp	r0, #0
 8003684:	d0d9      	beq.n	800363a <__swbuf_r+0x2e>
 8003686:	e7d6      	b.n	8003636 <__swbuf_r+0x2a>

08003688 <__swsetup_r>:
 8003688:	b538      	push	{r3, r4, r5, lr}
 800368a:	4b29      	ldr	r3, [pc, #164]	@ (8003730 <__swsetup_r+0xa8>)
 800368c:	4605      	mov	r5, r0
 800368e:	6818      	ldr	r0, [r3, #0]
 8003690:	460c      	mov	r4, r1
 8003692:	b118      	cbz	r0, 800369c <__swsetup_r+0x14>
 8003694:	6a03      	ldr	r3, [r0, #32]
 8003696:	b90b      	cbnz	r3, 800369c <__swsetup_r+0x14>
 8003698:	f7ff fa3c 	bl	8002b14 <__sinit>
 800369c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80036a0:	0719      	lsls	r1, r3, #28
 80036a2:	d422      	bmi.n	80036ea <__swsetup_r+0x62>
 80036a4:	06da      	lsls	r2, r3, #27
 80036a6:	d407      	bmi.n	80036b8 <__swsetup_r+0x30>
 80036a8:	2209      	movs	r2, #9
 80036aa:	602a      	str	r2, [r5, #0]
 80036ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80036b0:	81a3      	strh	r3, [r4, #12]
 80036b2:	f04f 30ff 	mov.w	r0, #4294967295
 80036b6:	e033      	b.n	8003720 <__swsetup_r+0x98>
 80036b8:	0758      	lsls	r0, r3, #29
 80036ba:	d512      	bpl.n	80036e2 <__swsetup_r+0x5a>
 80036bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80036be:	b141      	cbz	r1, 80036d2 <__swsetup_r+0x4a>
 80036c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80036c4:	4299      	cmp	r1, r3
 80036c6:	d002      	beq.n	80036ce <__swsetup_r+0x46>
 80036c8:	4628      	mov	r0, r5
 80036ca:	f7ff fb2b 	bl	8002d24 <_free_r>
 80036ce:	2300      	movs	r3, #0
 80036d0:	6363      	str	r3, [r4, #52]	@ 0x34
 80036d2:	89a3      	ldrh	r3, [r4, #12]
 80036d4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80036d8:	81a3      	strh	r3, [r4, #12]
 80036da:	2300      	movs	r3, #0
 80036dc:	6063      	str	r3, [r4, #4]
 80036de:	6923      	ldr	r3, [r4, #16]
 80036e0:	6023      	str	r3, [r4, #0]
 80036e2:	89a3      	ldrh	r3, [r4, #12]
 80036e4:	f043 0308 	orr.w	r3, r3, #8
 80036e8:	81a3      	strh	r3, [r4, #12]
 80036ea:	6923      	ldr	r3, [r4, #16]
 80036ec:	b94b      	cbnz	r3, 8003702 <__swsetup_r+0x7a>
 80036ee:	89a3      	ldrh	r3, [r4, #12]
 80036f0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80036f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036f8:	d003      	beq.n	8003702 <__swsetup_r+0x7a>
 80036fa:	4621      	mov	r1, r4
 80036fc:	4628      	mov	r0, r5
 80036fe:	f000 f84f 	bl	80037a0 <__smakebuf_r>
 8003702:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003706:	f013 0201 	ands.w	r2, r3, #1
 800370a:	d00a      	beq.n	8003722 <__swsetup_r+0x9a>
 800370c:	2200      	movs	r2, #0
 800370e:	60a2      	str	r2, [r4, #8]
 8003710:	6962      	ldr	r2, [r4, #20]
 8003712:	4252      	negs	r2, r2
 8003714:	61a2      	str	r2, [r4, #24]
 8003716:	6922      	ldr	r2, [r4, #16]
 8003718:	b942      	cbnz	r2, 800372c <__swsetup_r+0xa4>
 800371a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800371e:	d1c5      	bne.n	80036ac <__swsetup_r+0x24>
 8003720:	bd38      	pop	{r3, r4, r5, pc}
 8003722:	0799      	lsls	r1, r3, #30
 8003724:	bf58      	it	pl
 8003726:	6962      	ldrpl	r2, [r4, #20]
 8003728:	60a2      	str	r2, [r4, #8]
 800372a:	e7f4      	b.n	8003716 <__swsetup_r+0x8e>
 800372c:	2000      	movs	r0, #0
 800372e:	e7f7      	b.n	8003720 <__swsetup_r+0x98>
 8003730:	20000018 	.word	0x20000018

08003734 <_sbrk_r>:
 8003734:	b538      	push	{r3, r4, r5, lr}
 8003736:	4d06      	ldr	r5, [pc, #24]	@ (8003750 <_sbrk_r+0x1c>)
 8003738:	2300      	movs	r3, #0
 800373a:	4604      	mov	r4, r0
 800373c:	4608      	mov	r0, r1
 800373e:	602b      	str	r3, [r5, #0]
 8003740:	f7fd f9dc 	bl	8000afc <_sbrk>
 8003744:	1c43      	adds	r3, r0, #1
 8003746:	d102      	bne.n	800374e <_sbrk_r+0x1a>
 8003748:	682b      	ldr	r3, [r5, #0]
 800374a:	b103      	cbz	r3, 800374e <_sbrk_r+0x1a>
 800374c:	6023      	str	r3, [r4, #0]
 800374e:	bd38      	pop	{r3, r4, r5, pc}
 8003750:	20000230 	.word	0x20000230

08003754 <__swhatbuf_r>:
 8003754:	b570      	push	{r4, r5, r6, lr}
 8003756:	460c      	mov	r4, r1
 8003758:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800375c:	2900      	cmp	r1, #0
 800375e:	b096      	sub	sp, #88	@ 0x58
 8003760:	4615      	mov	r5, r2
 8003762:	461e      	mov	r6, r3
 8003764:	da0d      	bge.n	8003782 <__swhatbuf_r+0x2e>
 8003766:	89a3      	ldrh	r3, [r4, #12]
 8003768:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800376c:	f04f 0100 	mov.w	r1, #0
 8003770:	bf14      	ite	ne
 8003772:	2340      	movne	r3, #64	@ 0x40
 8003774:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003778:	2000      	movs	r0, #0
 800377a:	6031      	str	r1, [r6, #0]
 800377c:	602b      	str	r3, [r5, #0]
 800377e:	b016      	add	sp, #88	@ 0x58
 8003780:	bd70      	pop	{r4, r5, r6, pc}
 8003782:	466a      	mov	r2, sp
 8003784:	f000 f848 	bl	8003818 <_fstat_r>
 8003788:	2800      	cmp	r0, #0
 800378a:	dbec      	blt.n	8003766 <__swhatbuf_r+0x12>
 800378c:	9901      	ldr	r1, [sp, #4]
 800378e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003792:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003796:	4259      	negs	r1, r3
 8003798:	4159      	adcs	r1, r3
 800379a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800379e:	e7eb      	b.n	8003778 <__swhatbuf_r+0x24>

080037a0 <__smakebuf_r>:
 80037a0:	898b      	ldrh	r3, [r1, #12]
 80037a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80037a4:	079d      	lsls	r5, r3, #30
 80037a6:	4606      	mov	r6, r0
 80037a8:	460c      	mov	r4, r1
 80037aa:	d507      	bpl.n	80037bc <__smakebuf_r+0x1c>
 80037ac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80037b0:	6023      	str	r3, [r4, #0]
 80037b2:	6123      	str	r3, [r4, #16]
 80037b4:	2301      	movs	r3, #1
 80037b6:	6163      	str	r3, [r4, #20]
 80037b8:	b003      	add	sp, #12
 80037ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037bc:	ab01      	add	r3, sp, #4
 80037be:	466a      	mov	r2, sp
 80037c0:	f7ff ffc8 	bl	8003754 <__swhatbuf_r>
 80037c4:	9f00      	ldr	r7, [sp, #0]
 80037c6:	4605      	mov	r5, r0
 80037c8:	4639      	mov	r1, r7
 80037ca:	4630      	mov	r0, r6
 80037cc:	f7ff fb16 	bl	8002dfc <_malloc_r>
 80037d0:	b948      	cbnz	r0, 80037e6 <__smakebuf_r+0x46>
 80037d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80037d6:	059a      	lsls	r2, r3, #22
 80037d8:	d4ee      	bmi.n	80037b8 <__smakebuf_r+0x18>
 80037da:	f023 0303 	bic.w	r3, r3, #3
 80037de:	f043 0302 	orr.w	r3, r3, #2
 80037e2:	81a3      	strh	r3, [r4, #12]
 80037e4:	e7e2      	b.n	80037ac <__smakebuf_r+0xc>
 80037e6:	89a3      	ldrh	r3, [r4, #12]
 80037e8:	6020      	str	r0, [r4, #0]
 80037ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80037ee:	81a3      	strh	r3, [r4, #12]
 80037f0:	9b01      	ldr	r3, [sp, #4]
 80037f2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80037f6:	b15b      	cbz	r3, 8003810 <__smakebuf_r+0x70>
 80037f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80037fc:	4630      	mov	r0, r6
 80037fe:	f000 f81d 	bl	800383c <_isatty_r>
 8003802:	b128      	cbz	r0, 8003810 <__smakebuf_r+0x70>
 8003804:	89a3      	ldrh	r3, [r4, #12]
 8003806:	f023 0303 	bic.w	r3, r3, #3
 800380a:	f043 0301 	orr.w	r3, r3, #1
 800380e:	81a3      	strh	r3, [r4, #12]
 8003810:	89a3      	ldrh	r3, [r4, #12]
 8003812:	431d      	orrs	r5, r3
 8003814:	81a5      	strh	r5, [r4, #12]
 8003816:	e7cf      	b.n	80037b8 <__smakebuf_r+0x18>

08003818 <_fstat_r>:
 8003818:	b538      	push	{r3, r4, r5, lr}
 800381a:	4d07      	ldr	r5, [pc, #28]	@ (8003838 <_fstat_r+0x20>)
 800381c:	2300      	movs	r3, #0
 800381e:	4604      	mov	r4, r0
 8003820:	4608      	mov	r0, r1
 8003822:	4611      	mov	r1, r2
 8003824:	602b      	str	r3, [r5, #0]
 8003826:	f7fd f941 	bl	8000aac <_fstat>
 800382a:	1c43      	adds	r3, r0, #1
 800382c:	d102      	bne.n	8003834 <_fstat_r+0x1c>
 800382e:	682b      	ldr	r3, [r5, #0]
 8003830:	b103      	cbz	r3, 8003834 <_fstat_r+0x1c>
 8003832:	6023      	str	r3, [r4, #0]
 8003834:	bd38      	pop	{r3, r4, r5, pc}
 8003836:	bf00      	nop
 8003838:	20000230 	.word	0x20000230

0800383c <_isatty_r>:
 800383c:	b538      	push	{r3, r4, r5, lr}
 800383e:	4d06      	ldr	r5, [pc, #24]	@ (8003858 <_isatty_r+0x1c>)
 8003840:	2300      	movs	r3, #0
 8003842:	4604      	mov	r4, r0
 8003844:	4608      	mov	r0, r1
 8003846:	602b      	str	r3, [r5, #0]
 8003848:	f7fd f940 	bl	8000acc <_isatty>
 800384c:	1c43      	adds	r3, r0, #1
 800384e:	d102      	bne.n	8003856 <_isatty_r+0x1a>
 8003850:	682b      	ldr	r3, [r5, #0]
 8003852:	b103      	cbz	r3, 8003856 <_isatty_r+0x1a>
 8003854:	6023      	str	r3, [r4, #0]
 8003856:	bd38      	pop	{r3, r4, r5, pc}
 8003858:	20000230 	.word	0x20000230

0800385c <_init>:
 800385c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800385e:	bf00      	nop
 8003860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003862:	bc08      	pop	{r3}
 8003864:	469e      	mov	lr, r3
 8003866:	4770      	bx	lr

08003868 <_fini>:
 8003868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800386a:	bf00      	nop
 800386c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800386e:	bc08      	pop	{r3}
 8003870:	469e      	mov	lr, r3
 8003872:	4770      	bx	lr
